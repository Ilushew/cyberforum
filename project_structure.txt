=== СТРУКТУРА ПРОЕКТА:  ===
Путь: C:\Users\Ilya\PycharmProjects\cyberforum
============================================================

📁 .git/
  📄 COMMIT_EDITMSG (бинарный, пропущен)
  📄 config (бинарный, пропущен)
  📄 description (бинарный, пропущен)
  📄 FETCH_HEAD (бинарный, пропущен)
  📄 HEAD (бинарный, пропущен)
  📁 hooks/
    📄 applypatch-msg.sample (бинарный, пропущен)
    📄 commit-msg.sample (бинарный, пропущен)
    📄 fsmonitor-watchman.sample (бинарный, пропущен)
    📄 post-update.sample (бинарный, пропущен)
    📄 pre-applypatch.sample (бинарный, пропущен)
    📄 pre-commit.sample (бинарный, пропущен)
    📄 pre-merge-commit.sample (бинарный, пропущен)
    📄 pre-push.sample (бинарный, пропущен)
    📄 pre-rebase.sample (бинарный, пропущен)
    📄 pre-receive.sample (бинарный, пропущен)
    📄 prepare-commit-msg.sample (бинарный, пропущен)
    📄 push-to-checkout.sample (бинарный, пропущен)
    📄 sendemail-validate.sample (бинарный, пропущен)
    📄 update.sample (бинарный, пропущен)
  📄 index (бинарный, пропущен)
  📁 info/
    📄 exclude (бинарный, пропущен)
  📁 logs/
    📄 HEAD (бинарный, пропущен)
    📁 refs/
      📁 heads/
        📄 main (бинарный, пропущен)
      📁 remotes/
        📁 origin/
          📄 auth_system (бинарный, пропущен)
          📄 HEAD (бинарный, пропущен)
          📄 main (бинарный, пропущен)
  📁 objects/
    📁 03/
      📄 4929cd8ca1a80e171b05f16dc939ff4827ae55 (бинарный, пропущен)
    📁 04/
      📄 1376edbbbd7b78f425f1a9ac1db37007785d47 (бинарный, пропущен)
      📄 7f2c1946a406a97b2695365ba8f1a003291701 (бинарный, пропущен)
    📁 09/
      📄 459241f98dfb8b7225d79517987a2a4e8d432a (бинарный, пропущен)
      📄 adcb2c92584aef336faeb582d7ebc03c2c4211 (бинарный, пропущен)
    📁 0c/
      📄 2ccf5946871f4c23c6f3531fc30fa06ee272f6 (бинарный, пропущен)
    📁 0f/
      📄 0787a4f03aab9fe4dae1fc0ae93bc64cb4d106 (бинарный, пропущен)
    📁 19/
      📄 cb45586241a5e85383623dd1c60c7908e8fadf (бинарный, пропущен)
    📁 1a/
      📄 677e69e545922baa071f831873a3dff8a5f000 (бинарный, пропущен)
    📁 1e/
      📄 3c9744dd395e90424df0dbe4c795aa2cfad5e2 (бинарный, пропущен)
    📁 2d/
      📄 3bac2d02aaebffaaa8fe879f4642a219c1cb55 (бинарный, пропущен)
      📄 7d6b0a05b1d4da90a08a57663f5e071116e06a (бинарный, пропущен)
    📁 31/
      📄 97e9434b491f348f546c96917abfa0441fd54f (бинарный, пропущен)
    📁 3d/
      📄 e38b415d4ad064e1b3dd4e89b0436490437a36 (бинарный, пропущен)
    📁 49/
      📄 2d1f658f53e27b35159ceee186efb665033763 (бинарный, пропущен)
      📄 b5f332bd35d88d8070a15a4b4bce25b4c9302c (бинарный, пропущен)
    📁 4a/
      📄 48968b0b46538ec4bfcfe7cf8e3d28a6b9ef3a (бинарный, пропущен)
    📁 51/
      📄 d20b518632c3d69a3866e4f6160a3e9dde8123 (бинарный, пропущен)
    📁 59/
      📄 5aabec1a19244ba0c51b945767cb51edc1d515 (бинарный, пропущен)
      📄 a0cb916f61439831d7981a14ff6c028f5d9c3b (бинарный, пропущен)
    📁 5a/
      📄 a5b5ee0b50826a533cf421e86efefa575a4044 (бинарный, пропущен)
    📁 5e/
      📄 1a0d91f08cc21b8a8494ca7e0652fd63ea63ab (бинарный, пропущен)
    📁 62/
      📄 c893550adb53d3a8fc29a1584ff831cb829062 (бинарный, пропущен)
    📁 68/
      📄 ae792fb04fab61f0712cc0cd518394b048ceb9 (бинарный, пропущен)
    📁 6f/
      📄 984c95957f51acd194f7345604c7ac0f9a80b8 (бинарный, пропущен)
    📁 76/
      📄 29fd0339c9a903fff7891c9ace468082ed6703 (бинарный, пропущен)
    📁 77/
      📄 e0bc84c137ae992951fddc5c0207a3d2e894c2 (бинарный, пропущен)
    📁 79/
      📄 a0bc1f4ef4b8d7b0e495e3d39649b035539fb9 (бинарный, пропущен)
    📁 7a/
      📄 471aeb7374ee74cb680b38b1228af593ba60df (бинарный, пропущен)
    📁 7b/
      📄 93e537fdddd04ac54343f3772fa57087849573 (бинарный, пропущен)
      📄 a0c03fb80774fb56a6aaf40c40d1de640419f7 (бинарный, пропущен)
    📁 80/
      📄 207b8fa29d7c57caa2abd73bf7422a4e779ca5 (бинарный, пропущен)
    📁 82/
      📄 44a5d40d406e4a057e1530fa822475ee0c2e36 (бинарный, пропущен)
      📄 6971bb4c4615d9177f9f2ab99c894f428ca884 (бинарный, пропущен)
    📁 8b/
      📄 1993867fbc4220d4ef1a8406f41606980af3fc (бинарный, пропущен)
    📁 8e/
      📄 14ea766894dadd7ff4d7605be48db2983d5835 (бинарный, пропущен)
    📁 8f/
      📄 5313620ce4b8d432672a5e2743ca7241b6854c (бинарный, пропущен)
    📁 90/
      📄 b615067ebd1b31922dd932da913bf9acf54af5 (бинарный, пропущен)
    📁 94/
      📄 71af8ea4a1ae733db13298c1f23ff5e4bee9ad (бинарный, пропущен)
    📁 95/
      📄 711c49585ba851e2030f6fc790c78275943bd4 (бинарный, пропущен)
    📁 97/
      📄 59842dd130893b32a838f3056404fcbcb65a8f (бинарный, пропущен)
      📄 d47030bd0f86dd438dd3af535853fad321d6c7 (бинарный, пропущен)
    📁 99/
      📄 b10011895a011cea8528329d4cbda92bb08736 (бинарный, пропущен)
    📁 9b/
      📄 95af8d369214d04b814ca5487b9e008dc85ed9 (бинарный, пропущен)
    📁 a1/
      📄 a0b620e2702fe44deecc4a07fdd1a221f86989 (бинарный, пропущен)
    📁 a2/
      📄 18c4622f8105b4a25a56c7bafbf081052d9a6c (бинарный, пропущен)
    📁 a7/
      📄 bc303739774d01d3782b31bcfc9eaf5f64516e (бинарный, пропущен)
    📁 a8/
      📄 8b50bcb484b73f797453b2ed91e9d80e243ef2 (бинарный, пропущен)
    📁 a9/
      📄 46da2c245e21be1343f2abcd5b7ed3ef09703a (бинарный, пропущен)
    📁 ab/
      📄 c9ff798556bc822f1751388c5b7a10543840e5 (бинарный, пропущен)
    📁 ac/
      📄 a1f7b1536ced6b0adaccbf100e8daf53378853 (бинарный, пропущен)
    📁 b0/
      📄 0ca932e2a9a4f2fa52e3d2acb5eaa10c013060 (бинарный, пропущен)
    📁 b3/
      📄 231aeffd6bac893a0c2ac1e7131c3793cbeef0 (бинарный, пропущен)
      📄 e274f23f4dc103a0cc408239b07a3978a630e8 (бинарный, пропущен)
    📁 c3/
      📄 2a08c63c14ac74394baee168f5c794ca600163 (бинарный, пропущен)
    📁 c4/
      📄 fcb9f4d67efabeecafdb6db78e89cd2fd9da9e (бинарный, пропущен)
    📁 c6/
      📄 1579e093157949ea6b7ee88b837b9d788e290f (бинарный, пропущен)
      📄 dfbc0b640cd9bf2d772df68c249b44c3516397 (бинарный, пропущен)
    📁 ca/
      📄 a326feba94cd28e32260fac46e0f787eea4a34 (бинарный, пропущен)
    📁 d0/
      📄 6520946fad529f3677b70e6c631215df6f0478 (бинарный, пропущен)
    📁 d3/
      📄 9f807e6a7a88d2452f3c99fa2c00f57b7dd1dd (бинарный, пропущен)
    📁 df/
      📄 151dab34ffb3306bfe8220abad9d89818faf78 (бинарный, пропущен)
    📁 e1/
      📄 0dba14bb178ca9917868960cfb241131819e88 (бинарный, пропущен)
    📁 e3/
      📄 cc4027b97094d3549275bab93fd4f2db280c88 (бинарный, пропущен)
      📄 cfe6751777594a2b336ea1e8b08ad6c5345079 (бинарный, пропущен)
    📁 ee/
      📄 1cf2670bd9ff55668dc4dd5926759bb07f51b7 (бинарный, пропущен)
    📁 ef/
      📄 7565c7dad1d4a90e91263147e53264effb1333 (бинарный, пропущен)
    📁 f1/
      📄 63b0bbc3a9b617f00b3af9cc4294ba0bd2358b (бинарный, пропущен)
    📁 f6/
      📄 a8a7b3f94603643b349515564dc235be18b793 (бинарный, пропущен)
    📁 fb/
      📄 031dacf2d053f7dc0a203f27cad290ce34fbb3 (бинарный, пропущен)
      📄 6726d97e0cc7a14ca5f3318415ae2ca46025af (бинарный, пропущен)
      📄 6f289b2d7be9df8b720760f1ce4a61ced6a714 (бинарный, пропущен)
    📁 fc/
      📄 73a69e0c55610d927382aec3657ce78c3c5a7a (бинарный, пропущен)
    📁 info/
    📁 pack/
      📄 pack-c5987828c8b1f7876ef86fce5c079a30d1a12736.idx (бинарный, пропущен)
      📄 pack-c5987828c8b1f7876ef86fce5c079a30d1a12736.pack (бинарный, пропущен)
      📄 pack-c5987828c8b1f7876ef86fce5c079a30d1a12736.rev (бинарный, пропущен)
  📄 ORIG_HEAD (бинарный, пропущен)
  📄 packed-refs (бинарный, пропущен)
  📁 refs/
    📁 heads/
      📄 main (бинарный, пропущен)
    📁 remotes/
      📁 origin/
        📄 auth_system (бинарный, пропущен)
        📄 HEAD (бинарный, пропущен)
        📄 main (бинарный, пропущен)
    📁 tags/
📄 .gitignore
    --- СОДЕРЖИМОЕ ---
    .idea/
    __pycache__/
    *.pyc
    *.pyo
    *.pyd
    .Python
    env/
    venv/
    .venv/
    --- КОНЕЦ ---

📁 .idea/
  📄 .gitignore
      --- СОДЕРЖИМОЕ ---
      # Default ignored files
      /shelf/
      /workspace.xml
      --- КОНЕЦ ---

  📄 cyberforum_last.iml (бинарный, пропущен)
  📁 inspectionProfiles/
    📄 profiles_settings.xml
        --- СОДЕРЖИМОЕ ---
        <component name="InspectionProjectProfileManager">
          <settings>
            <option name="USE_PROJECT_PROFILE" value="false" />
            <version value="1.0" />
          </settings>
        </component>
        --- КОНЕЦ ---

  📄 misc.xml
      --- СОДЕРЖИМОЕ ---
      <?xml version="1.0" encoding="UTF-8"?>
      <project version="4">
        <component name="Black">
          <option name="sdkName" value="Python 3.13 (cyberforum) (3)" />
        </component>
        <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.13 (cyberforum) (3)" project-jdk-type="Python SDK" />
      </project>
      --- КОНЕЦ ---

  📄 vcs.xml
      --- СОДЕРЖИМОЕ ---
      <?xml version="1.0" encoding="UTF-8"?>
      <project version="4">
        <component name="VcsDirectoryMappings">
          <mapping directory="" vcs="Git" />
        </component>
      </project>
      --- КОНЕЦ ---

  📄 workspace.xml
      --- СОДЕРЖИМОЕ ---
      <?xml version="1.0" encoding="UTF-8"?>
      <project version="4">
        <component name="AutoImportSettings">
          <option name="autoReloadType" value="SELECTIVE" />
        </component>
        <component name="ChangeListManager">
          <list default="true" id="9aab387b-7b77-461c-91dc-26a39a490101" name="Changes" comment="">
            <change beforePath="$PROJECT_DIR$/cyberforum/db.sqlite3" beforeDir="false" afterPath="$PROJECT_DIR$/cyberforum/db.sqlite3" afterDir="false" />
            <change beforePath="$PROJECT_DIR$/vibe_maker.py" beforeDir="false" afterPath="$PROJECT_DIR$/vibe_maker.py" afterDir="false" />
          </list>
          <option name="SHOW_DIALOG" value="false" />
          <option name="HIGHLIGHT_CONFLICTS" value="true" />
          <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
          <option name="LAST_RESOLUTION" value="IGNORE" />
        </component>
        <component name="Git.Settings">
          <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
        </component>
        <component name="GitHubPullRequestSearchHistory">{
        &quot;lastFilter&quot;: {
          &quot;state&quot;: &quot;OPEN&quot;,
          &quot;assignee&quot;: &quot;Ilushew&quot;
        }
      }</component>
        <component name="GithubPullRequestsUISettings">{
        &quot;selectedUrlAndAccountId&quot;: {
          &quot;url&quot;: &quot;https://github.com/Ilushew/cyberforum&quot;,
          &quot;accountId&quot;: &quot;3c04e9a8-aa6e-491a-9ec2-73f427eda9de&quot;
        }
      }</component>
        <component name="ProjectColorInfo">{
        &quot;associatedIndex&quot;: 4
      }</component>
        <component name="ProjectId" id="33TQXjD12q5uE5gmKrAxsbFmjNj" />
        <component name="ProjectViewState">
          <option name="hideEmptyMiddlePackages" value="true" />
          <option name="showLibraryContents" value="true" />
          <option name="sortByType" value="true" />
          <option name="sortKey" value="BY_TYPE" />
        </component>
        <component name="PropertiesComponent"><![CDATA[{
        "keyToString": {
          "Python.vibe_maker.executor": "Run",
          "RunOnceActivity.ShowReadmeOnStart": "true",
          "git-widget-placeholder": "main"
        }
      }]]></component>
        <component name="SharedIndexes">
          <attachedChunks>
            <set>
              <option value="bundled-python-sdk-0e3be3396995-c546a90a8094-com.jetbrains.pycharm.community.sharedIndexes.bundled-PC-242.23339.19" />
            </set>
          </attachedChunks>
        </component>
        <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
        <component name="TaskManager">
          <task active="true" id="Default" summary="Default task">
            <changelist id="9aab387b-7b77-461c-91dc-26a39a490101" name="Changes" comment="" />
            <created>1759338624219</created>
            <option name="number" value="Default" />
            <option name="presentableId" value="Default" />
            <updated>1759338624219</updated>
          </task>
          <servers />
        </component>
        <component name="Vcs.Log.Tabs.Properties">
          <option name="TAB_STATES">
            <map>
              <entry key="MAIN">
                <value>
                  <State />
                </value>
              </entry>
            </map>
          </option>
        </component>
      </project>
      --- КОНЕЦ ---

📁 cyberforum/
  📁 core/
    📄 __init__.py
        --- СОДЕРЖИМОЕ ---
        --- КОНЕЦ ---

    📁 __pycache__/
      📄 __init__.cpython-313.pyc (бинарный, пропущен)
      📄 admin.cpython-313.pyc (бинарный, пропущен)
      📄 apps.cpython-313.pyc (бинарный, пропущен)
      📄 forms.cpython-313.pyc (бинарный, пропущен)
      📄 models.cpython-313.pyc (бинарный, пропущен)
      📄 urls.cpython-313.pyc (бинарный, пропущен)
      📄 views.cpython-313.pyc (бинарный, пропущен)
    📄 admin.py
        --- СОДЕРЖИМОЕ ---
        from django.contrib import admin
        from django.contrib.auth.admin import UserAdmin
        
        from .models import Contact, Event, User
        
        
        @admin.register(User)
        class CustomUserAdmin(UserAdmin):
            # Добавляем поле phone в админку
            fieldsets = UserAdmin.fieldsets + (
                ('Дополнительно', {'fields': ('phone',)}),
            )
            add_fieldsets = UserAdmin.add_fieldsets + (
                ('Дополнительно', {'fields': ('phone',)}),
            )
            list_display = UserAdmin.list_display + ('phone',)
        
        @admin.register(Contact)
        class ContactAdmin(admin.ModelAdmin):
            list_display = ['name', 'phone', 'email', 'audience']
            search_fields = ['name', 'address']
            list_filter = ['audience']
        
        
        @admin.register(Event)
        class EventAdmin(admin.ModelAdmin):
            list_display = ['title', 'date', 'location', 'audience']
            list_filter = ['audience', 'date']
            date_hierarchy = 'date'
        
        
        
        --- КОНЕЦ ---

    📄 apps.py
        --- СОДЕРЖИМОЕ ---
        from django.apps import AppConfig
        
        
        class CoreConfig(AppConfig):
            default_auto_field = 'django.db.models.BigAutoField'
            name = 'core'
        --- КОНЕЦ ---

    📄 forms.py
        --- СОДЕРЖИМОЕ ---
        from django import forms
        from django.contrib.auth.forms import UserCreationForm, UserChangeForm
        from django.contrib.auth.tokens import default_token_generator
        from django.utils.http import urlsafe_base64_encode
        from django.utils.encoding import force_bytes
        from django.core.mail import send_mail
        from django.conf import settings
        from .models import User
        
        
        class UserRegistrationForm(UserCreationForm):
            class Meta:
                model = User
                fields = ('email', 'password1', 'password2')
        
            def save(self, commit=True):
                user = super().save(commit=False)
                user.is_active = False  # Пока не подтверждён email — неактивен
                if commit:
                    user.save()
                    self.send_confirmation_email(user)
                return user
        
            def send_confirmation_email(self, user):
                token = default_token_generator.make_token(user)
                uid = urlsafe_base64_encode(force_bytes(user.pk))
                confirm_url = f"http://127.0.0.1:8000/confirm-email/{uid}/{token}/"
        
                subject = "Подтвердите ваш email"
                message = f"""
                Здравствуйте!
        
                Пожалуйста, подтвердите ваш email, перейдя по ссылке:
                {confirm_url}
        
                Если вы не регистрировались на сайте, просто проигнорируйте это письмо.
                """
                send_mail(subject, message, settings.DEFAULT_FROM_EMAIL, [user.email])
        
        class UserUpdateForm(UserChangeForm):
            password = None  # Скрыть поле пароля
        
            class Meta:
                model = User
                fields = ('username', 'first_name', 'last_name', 'email', 'phone')
                widgets = {
                    'username': forms.TextInput(attrs={'readonly': 'readonly'}),
                }
        
        class UserProfileForm(forms.ModelForm):
            class Meta:
                model = User
                fields = ('first_name', 'last_name', 'phone')
                widgets = {
                    'first_name': forms.TextInput(attrs={'class': 'form-control'}),
                    'last_name': forms.TextInput(attrs={'class': 'form-control'}),
                    'phone': forms.TextInput(attrs={'class': 'form-control'}),
                }
        --- КОНЕЦ ---

    📁 llm_assistant/
      📄 __init__.py
          --- СОДЕРЖИМОЕ ---
          --- КОНЕЦ ---

      📁 __pycache__/
        📄 __init__.cpython-313.pyc (бинарный, пропущен)
        📄 indexer.cpython-313.pyc (бинарный, пропущен)
        📄 loader.cpython-313.pyc (бинарный, пропущен)
        📄 model.cpython-313.pyc (бинарный, пропущен)
        📄 rag.cpython-313.pyc (бинарный, пропущен)
        📄 utils.cpython-313.pyc (бинарный, пропущен)
      📁 docs/
        📄 Keys_Web-razrabotka.pdf (бинарный, пропущен)
      📄 indexer.py
          --- СОДЕРЖИМОЕ ---
          import os
          from pathlib import Path
          
          from langchain_community.vectorstores import FAISS
          from langchain_community.embeddings import HuggingFaceEmbeddings
          from langchain_text_splitters import RecursiveCharacterTextSplitter
          from .loader import load_documents_from_folder
          from .utils import clean_text, count_tokens
          
          INDEX_DIR = "faiss_index"
          
          CURRENT_DIR = Path(__file__).parent
          DOCS_DIR = CURRENT_DIR / "docs"
          
          def create_or_load_vectorstore():
              """
              Создаёт или загружает векторную базу.
              Вызывается один раз при запуске Django.
              """
              embedding_model = HuggingFaceEmbeddings(
                  model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
              )
          
              if os.path.exists(INDEX_DIR):
                  print("🔄 Загрузка существующего индекса...")
                  vectorstore = FAISS.load_local(
                      INDEX_DIR,
                      embedding_model,
                      allow_dangerous_deserialization=True
                  )
                  print("✅ Индекс загружен.")
              else:
                  print("🆕 Создание нового индекса...")
                  documents = load_documents_from_folder(DOCS_DIR)
                  if not documents:
                      raise RuntimeError("Нет документов для индексации!")
          
                  splitter = RecursiveCharacterTextSplitter(
                      chunk_size=500,
                      chunk_overlap=100,
                      length_function=count_tokens,
                      separators=["\n\n", "\n", ". ", "! ", "? ", " ", ""],
                  )
          
                  chunks = splitter.split_documents(documents)
                  for chunk in chunks:
                      chunk.page_content = clean_text(chunk.page_content)
          
                  vectorstore = FAISS.from_documents(chunks, embedding_model)
                  vectorstore.save_local(INDEX_DIR)
                  print(f"✅ Индекс сохранён в {INDEX_DIR}/")
          
              return vectorstore
          --- КОНЕЦ ---

      📄 loader.py
          --- СОДЕРЖИМОЕ ---
          from pathlib import Path
          from typing import List
          from langchain_community.document_loaders import (
              TextLoader,
              PyMuPDFLoader,
              Docx2txtLoader,
          )
          
          SUPPORTED_EXTENSIONS = {".txt", ".pdf", ".docx"}
          
          def load_documents_from_folder(folder_path: str) -> List:
              documents = []
              folder = Path(folder_path)
              if not folder.exists():
                  raise FileNotFoundError(f"Папка {folder_path} не найдена!")
          
              for file_path in folder.iterdir():
                  if file_path.is_file() and file_path.suffix.lower() in SUPPORTED_EXTENSIONS:
                      print(f"📄 Загружаю: {file_path.name}")
                      if file_path.suffix.lower() == ".txt":
                          loader = TextLoader(file_path, encoding="utf-8")
                      elif file_path.suffix.lower() == ".pdf":
                          loader = PyMuPDFLoader(file_path)
                      elif file_path.suffix.lower() == ".docx":
                          loader = Docx2txtLoader(file_path)
                      else:
                          continue
          
                      docs = loader.load()
                      for doc in docs:
                          doc.metadata["source"] = file_path.name
                          doc.metadata["file_type"] = file_path.suffix.lower()[1:]
                      documents.extend(docs)
          
              if not documents:
                  print("⚠️  В папке docs не найдено ни одного поддерживаемого файла (.txt, .pdf, .docx)")
              else:
                  print(f"✅ Успешно загружено {len(documents)} документов.")
          
              return documents
          --- КОНЕЦ ---

      📄 model.py
          --- СОДЕРЖИМОЕ ---
          import os
          from langchain_gigachat.chat_models import GigaChat
          
          # Установите ключ в .env или здесь (лучше через .env)
          os.environ["GIGACHAT_CREDENTIALS"] = "NGRiZjA5MmMtYmJkOS00NzkzLWJlZGQtM2UzYWFlZTNiNWMwOjlmMjQ0MjU5LWUxM2YtNGUyYy1iYTg1LWFlOTlhZDhjMWUzOQ=="
          
          llm = GigaChat(
              model="GigaChat-Pro",
              verify_ssl_certs=False,
              timeout=60
          )
          --- КОНЕЦ ---

      📄 rag.py
          --- СОДЕРЖИМОЕ ---
          from .model import llm
          from .indexer import create_or_load_vectorstore
          from langchain_core.prompts import ChatPromptTemplate
          from langchain_core.output_parsers import StrOutputParser
          
          # Промпт — лучше вынести сюда, чтобы легко менять
          PROMPT_TEMPLATE = """
          Вы — помощник, который отвечает на вопросы на основе предоставленного контекста.
          Если в контексте нет информации, скажите: "Информация не найдена".
          (Учти, что этот текст будет отображаться на html странице, то есть например 
          использовать ** и html-тэги для выделения текста жирным не получится. Лучше оставить текст 
          без выделений, чем с непонятными символами)
          Контекст:
          {context}
          
          Вопрос:
          {question}
          
          Ответ:
          """
          
          prompt = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)
          chain = prompt | llm | StrOutputParser()
          
          def generate_answer(question: str, top_k: int = 3) -> str:
              """
              Генерирует ответ на вопрос с использованием RAG.
              Вызывается из Django view.
              """
              # Индекс уже должен быть загружен при старте сервера
              # Мы не пересоздаём его каждый раз!
              vectorstore = create_or_load_vectorstore()
          
              relevant_docs = vectorstore.similarity_search(question, k=top_k)
          
              context = "\n\n".join([
                  f"Источник: {doc.metadata['source']} (тип: {doc.metadata['file_type']})\n{doc.page_content}"
                  for doc in relevant_docs
              ])
          
              response = chain.invoke({
                  "context": context,
                  "question": question
              })
          
              return response
          --- КОНЕЦ ---

      📄 utils.py
          --- СОДЕРЖИМОЕ ---
          import re
          from bs4 import BeautifulSoup
          
          def clean_text(text: str) -> str:
              soup = BeautifulSoup(text, "html.parser")
              text = soup.get_text()
              text = re.sub(r'\s+', ' ', text)
              text = re.sub(r'[\u200b-\u200d\uFEFF]', '', text)
              text = re.sub(r'страниц[а-ы]?\s*\d+\s*из\s*\d+', '', text, flags=re.IGNORECASE)
              text = re.sub(r'http\S+|www\S+|https\S+', '', text, flags=re.MULTILINE)
              text = re.sub(r'[^\w\s.,!?;:()\-\–—\"\'\n]', ' ', text)
              return text.strip()
          
          # Используем ту же кодировку, что и у GigaChat (GPT-4)
          try:
              import tiktoken
              encoder = tiktoken.encoding_for_model("gpt-4")
          except ImportError:
              encoder = None
          
          def count_tokens(text: str) -> int:
              if encoder is None:
                  return len(text.split()) * 1.3  # Приблизительно
              return len(encoder.encode(text))
          --- КОНЕЦ ---

    📁 management/
      📁 commands/
        📄 initdata.py
            --- СОДЕРЖИМОЕ ---
            from django.core.management.base import BaseCommand
            from core.models import Contact, Event
            from courses.models import Course, Lesson, Question
            
            class Command(BaseCommand):
                help = 'Заполняет БД тестовыми данными'
            
                def handle(self, *args, **kwargs):
                    # Очистка
                    Contact.objects.all().delete()
                    Event.objects.all().delete()
                    Course.objects.all().delete()
            
                    # Контакты
                    Contact.objects.create(
                        name="Центр финансовой грамотности Ижевск",
                        address="ул. Пушкинская, 100",
                        phone="+7 (3412) 12-34-56",
                        audience="все"
                    )
            
                    # События
                    from datetime import date
                    Event.objects.create(
                        title="День финансовой грамотности в школе №1",
                        description="Открытый урок для школьников 8-11 классов",
                        date=date(2025, 4, 20),
                        location="Школа №1, Ижевск",
                        audience="школьник"
                    )
            
                    # Курсы
                    course1 = Course.objects.create(
                        title="Семейный бюджет",
                        description="Научитесь планировать доходы и расходы семьи.",
                        audience="все",
                        format_type="текст"
                    )
                    lesson1 = Lesson.objects.create(
                        course=course1,
                        title="Как составить бюджет",
                        content="<p>Шаг 1: Учет всех доходов...</p>",
                        video_url="https://www.youtube.com/embed/dQw4w9WgXcQ",
                        order=1
                    )
                    Question.objects.create(
                        lesson=lesson1,
                        text="Что входит в обязательные расходы?",
                        option_a="Аренда жилья",
                        option_b="Покупка нового телефона",
                        option_c="Отпуск",
                        correct_answer="A"
                    )
            
                    self.stdout.write(self.style.SUCCESS('Тестовые данные успешно загружены!'))
            --- КОНЕЦ ---

    📁 migrations/
      📄 0001_initial.py
          --- СОДЕРЖИМОЕ ---
          # Generated by Django 5.2.6 on 2025-10-02 11:33
          
          import django.contrib.auth.models
          import django.contrib.auth.validators
          import django.utils.timezone
          from django.db import migrations, models
          
          
          class Migration(migrations.Migration):
          
              initial = True
          
              dependencies = [
                  ('auth', '0012_alter_user_first_name_max_length'),
              ]
          
              operations = [
                  migrations.CreateModel(
                      name='Contact',
                      fields=[
                          ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                          ('name', models.CharField(max_length=200)),
                          ('address', models.TextField()),
                          ('phone', models.CharField(max_length=50)),
                          ('email', models.EmailField(blank=True, max_length=254)),
                          ('audience', models.CharField(choices=[('все', 'Все'), ('школьник', 'Школьники'), ('пенсионер', 'Пенсионеры'), ('МСП', 'МСП')], default='все', max_length=50)),
                      ],
                  ),
                  migrations.CreateModel(
                      name='Event',
                      fields=[
                          ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                          ('title', models.CharField(max_length=200)),
                          ('description', models.TextField()),
                          ('date', models.DateField()),
                          ('location', models.CharField(max_length=200)),
                          ('audience', models.CharField(choices=[('все', 'Все'), ('школьник', 'Школьники'), ('пенсионер', 'Пенсионеры'), ('МСП', 'МСП')], default='все', max_length=50)),
                      ],
                  ),
                  migrations.CreateModel(
                      name='User',
                      fields=[
                          ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                          ('password', models.CharField(max_length=128, verbose_name='password')),
                          ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                          ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                          ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                          ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                          ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                          ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                          ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                          ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                          ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                          ('phone', models.CharField(blank=True, max_length=20, verbose_name='Телефон')),
                          ('email_verified', models.BooleanField(default=False, verbose_name='Email подтверждён')),
                          ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                          ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                      ],
                      options={
                          'verbose_name': 'user',
                          'verbose_name_plural': 'users',
                          'abstract': False,
                      },
                      managers=[
                          ('objects', django.contrib.auth.models.UserManager()),
                      ],
                  ),
              ]
          --- КОНЕЦ ---

      📄 __init__.py
          --- СОДЕРЖИМОЕ ---
          --- КОНЕЦ ---

      📁 __pycache__/
        📄 0001_initial.cpython-313.pyc (бинарный, пропущен)
        📄 0002_alter_contact_audience_alter_event_audience.cpython-313.pyc (бинарный, пропущен)
        📄 0002_user.cpython-313.pyc (бинарный, пропущен)
        📄 0002_user_email_verified.cpython-313.pyc (бинарный, пропущен)
        📄 __init__.cpython-313.pyc (бинарный, пропущен)
    📄 models.py
        --- СОДЕРЖИМОЕ ---
        from django.db import models
        from django.contrib.auth.models import AbstractUser
        from django.db import models
        
        
        class User(AbstractUser):
            email = models.EmailField(unique=True, verbose_name="Email")
            phone = models.CharField(max_length=20, blank=True, verbose_name="Телефон")
            email_verified = models.BooleanField(default=False, verbose_name="Email подтверждён")
        
            USERNAME_FIELD = 'email'  # Используем email для входа
            REQUIRED_FIELDS = ['username']      # Не требуем другие поля при создании через createsuperuser
        
            def __str__(self):
                return self.email
        
        
        AUDIENCE_CHOICES = [
            ('все', 'Все'),
            ('школьник', 'Школьники'),
            ('пенсионер', 'Пенсионеры'),
            ('МСП', 'МСП'),
        ]
        
        class Contact(models.Model):
            name = models.CharField(max_length=200)
            address = models.TextField()
            phone = models.CharField(max_length=50)
            email = models.EmailField(blank=True)
            audience = models.CharField(max_length=50, choices=AUDIENCE_CHOICES, default='все')
        
            def __str__(self):
                return self.name
        
        class Event(models.Model):
            title = models.CharField(max_length=200)
            description = models.TextField()
            date = models.DateField()
            location = models.CharField(max_length=200)
            audience = models.CharField(max_length=50, choices=AUDIENCE_CHOICES, default='все')
        
            def __str__(self):
                return self.title
        --- КОНЕЦ ---

    📄 tests.py
        --- СОДЕРЖИМОЕ ---
        from django.test import TestCase
        
        # Create your tests here.
        --- КОНЕЦ ---

    📄 urls.py
        --- СОДЕРЖИМОЕ ---
        from django.urls import path
        from . import views
        
        app_name = 'core'
        urlpatterns = [
            path('', views.home_view, name='home'),
            path('contacts/', views.contacts_view, name='contacts'),
            path('events/', views.events_view, name='events'),
            path('chat-ask/', views.chat_ask, name='chat_ask'),
            path('register/', views.register_view, name='register'),
            path('login/', views.login_view, name='login'),
            path('logout/', views.logout_view, name='logout'),
            path('profile/', views.profile_view, name='profile'),
            path('confirm-email/<uidb64>/<token>/', views.confirm_email_view, name='confirm_email'),
        ]
        --- КОНЕЦ ---

    📄 views.py
        --- СОДЕРЖИМОЕ ---
        import json
        
        from django.http import JsonResponse
        from django.shortcuts import render, redirect
        from django.contrib.auth import authenticate, login, logout, get_user_model
        from django.contrib import messages
        from django.contrib.auth.decorators import login_required
        from django.contrib.auth.tokens import default_token_generator
        from django.utils.http import urlsafe_base64_decode
        from django.views.decorators.csrf import csrf_exempt
        
        from .forms import UserRegistrationForm, UserProfileForm
        from .llm_assistant.rag import generate_answer
        from .models import Contact, Event
        from courses.models import Course
        
        User = get_user_model()
        
        
        def home_view(request):
            courses = Course.objects.all()[:6]
            upcoming_events = Event.objects.order_by('date')[:3]
            return render(request, 'core/home.html', {
                'courses': courses,
                'events': upcoming_events,
            })
        
        
        def contacts_view(request):
            contacts = Contact.objects.all()
            return render(request, 'core/contacts.html', {'contacts': contacts})
        
        
        def events_view(request):
            events = Event.objects.order_by('date')
            return render(request, 'core/events.html', {'events': events})
        
        
        @csrf_exempt
        def chat_ask(request):
            if request.method != 'POST':
                return JsonResponse({'error': 'Метод не поддерживается'}, status=405)
        
            try:
                data = json.loads(request.body)
                question = data.get('question', '').strip()
        
                if not question:
                    return JsonResponse({'error': 'Вопрос не может быть пустым'}, status=400)
        
                answer = generate_answer(question)
        
                return JsonResponse({'answer': answer})
        
            except Exception as e:
                return JsonResponse({'error': f'Ошибка сервера: {str(e)}'}, status=500)
        
        
        def register_view(request):
            if request.method == 'POST':
                form = UserRegistrationForm(request.POST)
                if form.is_valid():
                    form.save()
                    messages.success(request, "Регистрация прошла успешно! Проверьте email для подтверждения.")
                    return redirect('core:login')
            else:
                form = UserRegistrationForm()
            return render(request, 'core/register.html', {'form': form})
        
        def login_view(request):
            if request.method == 'POST':
                email = request.POST.get('email')
                password = request.POST.get('password')
                user = authenticate(request, username=email, password=password)
                if user is not None:
                    if not user.is_active:
                        messages.error(request, "Пожалуйста, подтвердите ваш email, чтобы войти.")
                    else:
                        login(request, user)
                        messages.success(request, f"Добро пожаловать, {user.email}!")
                        return redirect('core:profile')
                else:
                    messages.error(request, "Неверный email или пароль.")
            return render(request, 'core/login.html')
        
        def confirm_email_view(request, uidb64, token):
            try:
                uid = urlsafe_base64_decode(uidb64).decode()
                user = User.objects.get(pk=uid)
            except (TypeError, ValueError, OverflowError, User.DoesNotExist):
                user = None
        
            if user is not None and default_token_generator.check_token(user, token):
                user.is_active = True
                user.email_verified = True
                user.save()
                messages.success(request, "Ваш email подтверждён! Теперь вы можете войти.")
            else:
                messages.error(request, "Ссылка недействительна или устарела.")
            return redirect('core:login')
        
        @login_required
        def profile_view(request):
            if request.method == 'POST':
                form = UserProfileForm(request.POST, instance=request.user)
                if form.is_valid():
                    form.save()
                    messages.success(request, "Данные обновлены!")
                    return redirect('core:profile')
            else:
                form = UserProfileForm(instance=request.user)
            return render(request, 'core/profile.html', {'form': form})
        
        def logout_view(request):
            logout(request)
            messages.info(request, "Вы вышли из аккаунта.")
            return redirect('core:home')
        --- КОНЕЦ ---

  📁 courses/
    📄 __init__.py
        --- СОДЕРЖИМОЕ ---
        --- КОНЕЦ ---

    📁 __pycache__/
      📄 __init__.cpython-313.pyc (бинарный, пропущен)
      📄 admin.cpython-313.pyc (бинарный, пропущен)
      📄 admin_views.cpython-313.pyc (бинарный, пропущен)
      📄 apps.cpython-313.pyc (бинарный, пропущен)
      📄 models.cpython-313.pyc (бинарный, пропущен)
      📄 urls.cpython-313.pyc (бинарный, пропущен)
      📄 views.cpython-313.pyc (бинарный, пропущен)
    📄 admin.py
        --- СОДЕРЖИМОЕ ---
        from django.contrib import admin
        from .models import Course, Lesson, Question, TestResult
        
        class LessonInline(admin.TabularInline):
            model = Lesson
            extra = 1
        
        class QuestionInline(admin.TabularInline):
            model = Question
            extra = 1
        
        @admin.register(Course)
        class CourseAdmin(admin.ModelAdmin):
            list_display = ['title', 'audience', 'format_type', 'created_at']
            list_filter = ['audience', 'format_type']
            search_fields = ['title', 'description']
            inlines = [LessonInline]  # Показывает уроки прямо внутри курса
        
        @admin.register(Lesson)
        class LessonAdmin(admin.ModelAdmin):
            list_display = ['title', 'course', 'order']
            list_filter = ['course']
            search_fields = ['title', 'content']
            inlines = [QuestionInline]  # Вопросы внутри урока
        
        @admin.register(Question)
        class QuestionAdmin(admin.ModelAdmin):
            list_display = ['text', 'lesson', 'correct_answer']
            list_filter = ['lesson__course']
            search_fields = ['text']
        --- КОНЕЦ ---

    📄 admin_views.py
        --- СОДЕРЖИМОЕ ---
        from django.contrib.admin.views.decorators import staff_member_required
        from django.shortcuts import render
        from django.db.models import Avg, Count
        from .models import TestResult, Course
        
        @staff_member_required
        def test_analytics_view(request):
            # Средний балл по курсам
            course_stats = (
                TestResult.objects
                .select_related('lesson__course')
                .values('lesson__course__title')
                .annotate(avg_percent=Avg('percent'))
                .order_by('-avg_percent')
            )
        
            # Динамика прохождений за последние 30 дней
            daily_stats = (
                TestResult.objects
                .extra(select={'date': "date(completed_at)"})
                .values('date')
                .annotate(count=Count('id'))
                .order_by('date')
            )
        
            context = {
                'course_labels': [item['lesson__course__title'] for item in course_stats],
                'course_data': [float(item['avg_percent']) for item in course_stats],
                'daily_labels': [str(item['date']) for item in daily_stats],
                'daily_data': [item['count'] for item in daily_stats],
            }
            return render(request, 'admin/test_analytics.html', context)
        --- КОНЕЦ ---

    📄 apps.py
        --- СОДЕРЖИМОЕ ---
        from django.apps import AppConfig
        
        
        class CoursesConfig(AppConfig):
            default_auto_field = 'django.db.models.BigAutoField'
            name = 'courses'
        --- КОНЕЦ ---

    📁 migrations/
      📄 0001_initial.py
          --- СОДЕРЖИМОЕ ---
          # Generated by Django 5.2.6 on 2025-10-02 11:33
          
          import django.db.models.deletion
          from django.conf import settings
          from django.db import migrations, models
          
          
          class Migration(migrations.Migration):
          
              initial = True
          
              dependencies = [
                  migrations.swappable_dependency(settings.AUTH_USER_MODEL),
              ]
          
              operations = [
                  migrations.CreateModel(
                      name='Course',
                      fields=[
                          ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                          ('title', models.CharField(max_length=200)),
                          ('description', models.TextField()),
                          ('audience', models.CharField(choices=[('все', 'Все'), ('школьник', 'Школьники'), ('пенсионер', 'Пенсионеры'), ('МСП', 'МСП')], default='все', max_length=50)),
                          ('format_type', models.CharField(choices=[('текст', 'Текст'), ('видео', 'Видео'), ('тест', 'Тест')], default='текст', max_length=50)),
                          ('created_at', models.DateTimeField(auto_now_add=True)),
                      ],
                  ),
                  migrations.CreateModel(
                      name='Lesson',
                      fields=[
                          ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                          ('title', models.CharField(max_length=200)),
                          ('content', models.TextField()),
                          ('video_url', models.URLField(blank=True, null=True)),
                          ('order', models.IntegerField(default=1)),
                          ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='courses.course')),
                      ],
                  ),
                  migrations.CreateModel(
                      name='Question',
                      fields=[
                          ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                          ('text', models.CharField(max_length=300)),
                          ('option_a', models.CharField(max_length=200)),
                          ('option_b', models.CharField(max_length=200)),
                          ('option_c', models.CharField(blank=True, max_length=200)),
                          ('option_d', models.CharField(blank=True, max_length=200)),
                          ('correct_answer', models.CharField(max_length=1)),
                          ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='courses.lesson')),
                      ],
                  ),
                  migrations.CreateModel(
                      name='TestResult',
                      fields=[
                          ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                          ('score', models.PositiveSmallIntegerField()),
                          ('total', models.PositiveSmallIntegerField()),
                          ('percent', models.PositiveSmallIntegerField()),
                          ('completed_at', models.DateTimeField(auto_now_add=True)),
                          ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_results', to='courses.lesson')),
                          ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                      ],
                  ),
              ]
          --- КОНЕЦ ---

      📄 __init__.py
          --- СОДЕРЖИМОЕ ---
          --- КОНЕЦ ---

      📁 __pycache__/
        📄 0001_initial.cpython-313.pyc (бинарный, пропущен)
        📄 0002_alter_course_audience_alter_course_format_type.cpython-313.pyc (бинарный, пропущен)
        📄 0002_testresult.cpython-313.pyc (бинарный, пропущен)
        📄 0003_testresult_user.cpython-313.pyc (бинарный, пропущен)
        📄 __init__.cpython-313.pyc (бинарный, пропущен)
    📄 models.py
        --- СОДЕРЖИМОЕ ---
        from django.db import models
        from django.contrib.auth import get_user_model
        
        User = get_user_model()
        
        AUDIENCE_CHOICES = [
            ('все', 'Все'),
            ('школьник', 'Школьники'),
            ('пенсионер', 'Пенсионеры'),
            ('МСП', 'МСП'),
        ]
        
        FORMAT_CHOICES = [
            ('текст', 'Текст'),
            ('видео', 'Видео'),
            ('тест', 'Тест'),
        ]
        
        class Course(models.Model):
            title = models.CharField(max_length=200)
            description = models.TextField()
            audience = models.CharField(max_length=50, choices=AUDIENCE_CHOICES, default='все')
            format_type = models.CharField(max_length=50, choices=FORMAT_CHOICES, default='текст')
            created_at = models.DateTimeField(auto_now_add=True)
        
            def __str__(self):
                return self.title
        
        
        class Lesson(models.Model):
            course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='lessons')
            title = models.CharField(max_length=200)
            content = models.TextField()
            video_url = models.URLField(blank=True, null=True)  # YouTube
            order = models.IntegerField(default=1)
        
            def __str__(self):
                return f"{self.course.title} - {self.title}"
        
        
        class Question(models.Model):
            lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE, related_name='questions')
            text = models.CharField(max_length=300)
            option_a = models.CharField(max_length=200)
            option_b = models.CharField(max_length=200)
            option_c = models.CharField(max_length=200, blank=True)
            option_d = models.CharField(max_length=200, blank=True)
            correct_answer = models.CharField(max_length=1)  # A, B, C, D
        
            def __str__(self):
                return self.text
        
        
        class TestResult(models.Model):
            lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE, related_name='test_results')
            user = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
            score = models.PositiveSmallIntegerField()
            total = models.PositiveSmallIntegerField()
            percent = models.PositiveSmallIntegerField()
            completed_at = models.DateTimeField(auto_now_add=True)
        
            def __str__(self):
                return f"{self.lesson} — {self.percent}%"
        --- КОНЕЦ ---

    📄 tests.py
        --- СОДЕРЖИМОЕ ---
        from django.test import TestCase
        
        # Create your tests here.
        --- КОНЕЦ ---

    📄 urls.py
        --- СОДЕРЖИМОЕ ---
        from django.urls import path
        from . import views, admin_views
        
        app_name = 'courses'
        
        urlpatterns = [
            path('', views.course_list_view, name='list'),
            path('<int:course_id>/', views.course_detail_view, name='detail'),
            path('lesson/<int:lesson_id>/', views.lesson_view, name='lesson'),
            path('lesson/<int:lesson_id>/test/', views.submit_test_view, name='test'),
            path('admin/analytics/', admin_views.test_analytics_view, name='test_analytics'),
        ]
        --- КОНЕЦ ---

    📄 views.py
        --- СОДЕРЖИМОЕ ---
        from django.shortcuts import render, get_object_or_404, redirect
        from .models import Course, Lesson, Question, TestResult
        
        
        def course_list_view(request):
            courses = Course.objects.all()
        
            # Получаем параметры фильтрации
            audience = request.GET.get('audience')
            format_type = request.GET.get('format')
        
            if audience:
                courses = courses.filter(audience=audience)
            if format_type:
                courses = courses.filter(format_type=format_type)
        
            return render(request, 'courses/list.html', {'courses': courses})
        
        
        def course_detail_view(request, course_id):
            course = get_object_or_404(Course, id=course_id)
            return render(request, 'courses/detail.html', {'course': course})
        
        
        def lesson_view(request, lesson_id):
            lesson = get_object_or_404(Lesson, id=lesson_id)
            questions = lesson.questions.all()
            return render(request, 'courses/lesson.html', {
                'lesson': lesson,
                'questions': questions,
            })
        
        
        def submit_test_view(request, lesson_id):
            lesson = get_object_or_404(Lesson, id=lesson_id)
            questions = lesson.questions.all()
            total = questions.count()
            correct = 0
            if request.method == "POST":
                for q in questions:
                    user_answer = request.POST.get(f'q{q.id}')
                    if user_answer == q.correct_answer:
                        correct += 1
                score_percent = int((correct / total) * 100) if total > 0 else 0
        
                # Сохраняем результат
                TestResult.objects.create(
                    lesson=lesson,
                    user=request.user if request.user.is_authenticated else None,
                    score=correct,
                    total=total,
                    percent=score_percent
                )
        
                return render(request, 'courses/result.html', {
                    'score': correct,
                    'total': total,
                    'percent': score_percent,
                    'lesson': lesson,
                })
            return redirect('courses:lesson', lesson_id=lesson_id)
        --- КОНЕЦ ---

  📁 cyberforum/
    📄 __init__.py
        --- СОДЕРЖИМОЕ ---
        --- КОНЕЦ ---

    📁 __pycache__/
      📄 __init__.cpython-313.pyc (бинарный, пропущен)
      📄 settings.cpython-313.pyc (бинарный, пропущен)
      📄 urls.cpython-313.pyc (бинарный, пропущен)
      📄 wsgi.cpython-313.pyc (бинарный, пропущен)
    📄 admin.py
        --- СОДЕРЖИМОЕ ---
        from django.contrib import admin
        from django.contrib.auth.admin import UserAdmin as BaseUserAdmin
        from django.contrib.auth.models import User, Group
        
        admin.site.register(User, BaseUserAdmin)
        admin.site.register(Group)
        --- КОНЕЦ ---

    📄 asgi.py
        --- СОДЕРЖИМОЕ ---
        """
        ASGI config for cyberforum project.
        
        It exposes the ASGI callable as a module-level variable named ``application``.
        
        For more information on this file, see
        https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
        """
        
        import os
        
        from django.core.asgi import get_asgi_application
        
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cyberforum.settings')
        
        application = get_asgi_application()
        --- КОНЕЦ ---

    📄 settings.py
        --- СОДЕРЖИМОЕ ---
        """
        Django settings for cyberforum project.
        
        Generated by 'django-admin startproject' using Django 5.2.6.
        
        For more information on this file, see
        https://docs.djangoproject.com/en/5.2/topics/settings/
        
        For the full list of settings and their values, see
        https://docs.djangoproject.com/en/5.2/ref/settings/
        """
        
        from pathlib import Path
        
        # Build paths inside the project like this: BASE_DIR / 'subdir'.
        BASE_DIR = Path(__file__).resolve().parent.parent
        
        
        # Quick-start development settings - unsuitable for production
        # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
        
        # SECURITY WARNING: keep the secret key used in production secret!
        SECRET_KEY = 'django-insecure-l#=@!evoxr(qh0c#lbm==+7=1q*^youjnqlb1h@$4)iz3bw@$r'
        
        # SECURITY WARNING: don't run with debug turned on in production!
        DEBUG = True
        
        ALLOWED_HOSTS = []
        
        
        # Application definition
        
        INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'core',
            'courses',
            'search',
            'crispy_forms',
            'widget_tweaks',
        ]
        
        MIDDLEWARE = [
            'django.middleware.security.SecurityMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
        ]
        
        ROOT_URLCONF = 'cyberforum.urls'
        
        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': ['templates'],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]
        
        WSGI_APPLICATION = 'cyberforum.wsgi.application'
        
        
        # Database
        # https://docs.djangoproject.com/en/5.2/ref/settings/#databases
        
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
        
        
        # Password validation
        # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
        
        AUTH_PASSWORD_VALIDATORS = [
            {
                'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
            },
        ]
        
        
        # Internationalization
        # https://docs.djangoproject.com/en/5.2/topics/i18n/
        
        LANGUAGE_CODE = 'ru-ru'
        TIME_ZONE = 'Europe/Samara'
        USE_I18N = True
        USE_TZ = True
        
        
        STATIC_URL = '/static/'
        STATICFILES_DIRS = [BASE_DIR / "static"]
        STATIC_ROOT = BASE_DIR / "staticfiles"
        
        MEDIA_URL = '/media/'
        MEDIA_ROOT = BASE_DIR / 'media'
        
        CRISPY_TEMPLATE_PACK = 'bootstrap4'
        
        DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
        
        AUTH_USER_MODEL = 'core.User'
        
        EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
        DEFAULT_FROM_EMAIL = 'noreply@fingramota.ru'
        --- КОНЕЦ ---

    📄 urls.py
        --- СОДЕРЖИМОЕ ---
        from django.contrib import admin
        from django.urls import path, include
        from django.conf import settings
        from django.conf.urls.static import static
        
        urlpatterns = [
            path('admin/', admin.site.urls),
            path('', include('core.urls')),
            path('courses/', include('courses.urls')),
            path('search/', include('search.urls')),
        ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
        --- КОНЕЦ ---

    📄 wsgi.py
        --- СОДЕРЖИМОЕ ---
        """
        WSGI config for cyberforum project.
        
        It exposes the WSGI callable as a module-level variable named ``application``.
        
        For more information on this file, see
        https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
        """
        
        import os
        
        from django.core.wsgi import get_wsgi_application
        
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cyberforum.settings')
        
        application = get_wsgi_application()
        --- КОНЕЦ ---

  📄 db.sqlite3 (бинарный, пропущен)
  📁 faiss_index/
    📄 index.faiss (бинарный, пропущен)
    📄 index.pkl (бинарный, пропущен)
  📄 manage.py
      --- СОДЕРЖИМОЕ ---
      #!/usr/bin/env python
      """Django's command-line utility for administrative tasks."""
      import os
      import sys
      
      
      def main():
          """Run administrative tasks."""
          os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cyberforum.settings')
          try:
              from django.core.management import execute_from_command_line
          except ImportError as exc:
              raise ImportError(
                  "Couldn't import Django. Are you sure it's installed and "
                  "available on your PYTHONPATH environment variable? Did you "
                  "forget to activate a virtual environment?"
              ) from exc
          execute_from_command_line(sys.argv)
      
      
      if __name__ == '__main__':
          main()
      --- КОНЕЦ ---

  📁 search/
    📄 __init__.py
        --- СОДЕРЖИМОЕ ---
        --- КОНЕЦ ---

    📁 __pycache__/
      📄 __init__.cpython-313.pyc (бинарный, пропущен)
      📄 admin.cpython-313.pyc (бинарный, пропущен)
      📄 apps.cpython-313.pyc (бинарный, пропущен)
      📄 models.cpython-313.pyc (бинарный, пропущен)
      📄 urls.cpython-313.pyc (бинарный, пропущен)
      📄 views.cpython-313.pyc (бинарный, пропущен)
    📄 admin.py
        --- СОДЕРЖИМОЕ ---
        from django.contrib import admin
        
        # Register your models here.
        --- КОНЕЦ ---

    📄 apps.py
        --- СОДЕРЖИМОЕ ---
        from django.apps import AppConfig
        
        
        class SearchConfig(AppConfig):
            default_auto_field = 'django.db.models.BigAutoField'
            name = 'search'
        --- КОНЕЦ ---

    📁 migrations/
      📄 __init__.py
          --- СОДЕРЖИМОЕ ---
          --- КОНЕЦ ---

      📁 __pycache__/
        📄 __init__.cpython-313.pyc (бинарный, пропущен)
    📄 models.py
        --- СОДЕРЖИМОЕ ---
        from django.db import models
        
        # Create your models here.
        --- КОНЕЦ ---

    📄 tests.py
        --- СОДЕРЖИМОЕ ---
        from django.test import TestCase
        
        # Create your tests here.
        --- КОНЕЦ ---

    📄 urls.py
        --- СОДЕРЖИМОЕ ---
        from django.urls import path
        from . import views
        
        app_name = 'search'
        
        urlpatterns = [
            path('', views.search_view, name='results'),
        ]
        --- КОНЕЦ ---

    📄 views.py
        --- СОДЕРЖИМОЕ ---
        from django.shortcuts import render
        from courses.models import Course
        from core.models import Contact, Event
        
        def search_view(request):
            query = request.GET.get('q', '').strip()
            audience = request.GET.get('audience', '')
            format_type = request.GET.get('format', '')
        
            courses = Course.objects.all()
            contacts = Contact.objects.all()
            events = Event.objects.all()
        
            if query:
                courses = courses.filter(title__icontains=query) | courses.filter(description__icontains=query)
                contacts = contacts.filter(name__icontains=query) | contacts.filter(address__icontains=query)
                events = events.filter(title__icontains=query) | events.filter(description__icontains=query)
        
            if audience:
                courses = courses.filter(audience=audience)
                contacts = contacts.filter(audience=audience)
                events = events.filter(audience=audience)
        
            if format_type:
                courses = courses.filter(format_type=format_type)
        
            context = {
                'query': query,
                'courses': courses,
                'contacts': contacts,
                'events': events,
                'audience_filter': audience,
                'format_filter': format_type,
            }
            return render(request, 'search/results.html', context)
        --- КОНЕЦ ---

  📁 static/
    📁 css/
      📄 style.css
          --- СОДЕРЖИМОЕ ---
          body {
              font-size: 1rem;
              line-height: 1.6;
          }
          
          .card {
              box-shadow: 0 2px 8px rgba(0,0,0,0.1);
              transition: transform 0.2s;
          }
          
          .card:hover {
              transform: translateY(-3px);
          }
          
          footer {
              font-size: 0.9rem;
          }
          --- КОНЕЦ ---

  📁 templates/
    📁 admin/
      📄 test_analytics.html
          --- СОДЕРЖИМОЕ ---
          <!-- templates/admin/test_analytics.html -->
          {% extends "admin/base_site.html" %}
          {% load static %}
          
          {% block title %}Аналитика тестов{% endblock %}
          
          {% block extrahead %}
          <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
          {% endblock %}
          
          {% block content %}
          <div class="container-fluid">
              <h1>📊 Аналитика результатов тестов</h1>
          
              <div class="row mt-4">
                  <div class="col-md-6">
                      <h3>Средний балл по курсам</h3>
                      <canvas id="courseChart" height="100"></canvas>
                  </div>
                  <div class="col-md-6">
                      <h3>Динамика прохождений (последние дни)</h3>
                      <canvas id="dailyChart" height="100"></canvas>
                  </div>
              </div>
          </div>
          
          <script>
          const courseCtx = document.getElementById('courseChart').getContext('2d');
          new Chart(courseCtx, {
              type: 'bar',
              data: {
                  labels: {{ course_labels|safe }},
                  datasets: [{
                      label: 'Средний %',
                      data: {{ course_data|safe }},
                      backgroundColor: '#6a7d5d'
                  }]
              },
              options: {
                  responsive: true,
                  scales: {
                      y: { beginAtZero: true, max: 100 }
                  }
              }
          });
          
          const dailyCtx = document.getElementById('dailyChart').getContext('2d');
          new Chart(dailyCtx, {
              type: 'line',
              data: {
                  labels: {{ daily_labels|safe }},
                  datasets: [{
                      label: 'Количество прохождений',
                      data: {{ daily_data|safe }},
                      borderColor: '#d4c8b7',
                      backgroundColor: 'rgba(212, 200, 183, 0.2)',
                      fill: true
                  }]
              },
              options: {
                  responsive: true,
                  scales: {
                      y: { beginAtZero: true }
                  }
              }
          });
          </script>
          {% endblock %}
          --- КОНЕЦ ---

    📄 base.html
        --- СОДЕРЖИМОЕ ---
        {% load static %}
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>Финансовая грамотность Удмуртии</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <link href="{% static 'css/style.css' %}" rel="stylesheet">
        </head>
        <body>
            <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
                <div class="container">
                    <a class="navbar-brand" href="{% url 'core:home' %}">ФинГрамота Удмуртии</a>
                    <div class="navbar-nav ms-auto">
                <a class="nav-link" href="{% url 'core:home' %}">Главная</a>
                <a class="nav-link" href="{% url 'courses:list' %}">Курсы</a>
                <a class="nav-link" href="{% url 'core:contacts' %}">Контакты</a>
                <a class="nav-link" href="{% url 'core:events' %}">События</a>
                {% if user.is_authenticated %}
                    <a class="nav-link" href="{% url 'core:profile' %}">Кабинет</a>
                    <a class="nav-link" href="{% url 'core:logout' %}">Выйти</a>
                {% else %}
                    <a class="nav-link" href="{% url 'core:login' %}">Войти</a>
                    <a class="nav-link" href="{% url 'core:register' %}">Регистрация</a>
                {% endif %}
                <form class="d-flex ms-3" action="{% url 'search:results' %}" method="get">
                    <input class="form-control me-2" type="search" name="q" placeholder="Поиск..." aria-label="Поиск">
                    <button class="btn btn-outline-light" type="submit">Найти</button>
                </form>
            </div>
                </div>
            </nav>
        
        
            <div class="container mt-4">
                {% block content %}{% endblock %}
            </div>
        
            <div id="chatbot-widget" style="position: fixed; bottom: 20px; right: 20px; z-index: 9999; width: 320px; height: 450px; display: flex; flex-direction: column; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; box-shadow: 0 4px 15px rgba(0,0,0,0.1); border-radius: 16px; background-color: white; overflow: hidden;">
        
            <div style="background-color: #d4c8b7; color: #5a6b4d; padding: 12px; font-weight: bold; display: flex; align-items: center; justify-content: space-between;">
                💰💼 Гений финансов
                <button onclick="toggleChat()" style="background: none; border: none; color: #333; cursor: pointer; font-size: 16px;">×</button>
            </div>
        
            <div id="chat-messages" style="flex-grow: 1; padding: 12px; overflow-y: auto; background-color: #f8f6f0; max-height: 320px;"></div>
        
            <div style="display: flex; padding: 10px; border-top: 1px solid #e0e0e0;">
                <input type="text" id="chat-input" placeholder="Ваш вопрос"
                       style="flex-grow: 1; padding: 8px; border: 1px solid #ccc; border-radius: 20px; outline: none;"
                       onkeydown="if(event.key==='Enter') sendQuestion()">
                <button onclick="sendQuestion()"
                        style="margin-left: 8px; padding: 8px 16px; background-color: #6a7d5d; color: white; border: none; border-radius: 20px; cursor: pointer; font-size: 14px;">
                    Отправить
                </button>
            </div>
        </div>
        
        <div id="chat-open-btn" style="position: fixed; bottom: 20px; right: 20px; z-index: 9998; width: 50px; height: 50px; border-radius: 50%; background-color: #6a7d5d; color: white; display: flex; align-items: center; justify-content: center; font-size: 24px; box-shadow: 0 4px 10px rgba(0,0,0,0.1); cursor: pointer; display: none;">💬</div>
        
        <script>
            function toggleChat() {
            const widget = document.getElementById('chatbot-widget');
            const openBtn = document.getElementById('chat-open-btn');
        
            if (widget.style.display === 'none' || !widget.style.display) {
                widget.style.display = 'flex';
                openBtn.style.display = 'none';
                // ✅ Отправляем приветствие при открытии чата
                sendGreeting();
            } else {
                widget.style.display = 'none';
                openBtn.style.display = 'flex';
            }
        }
        
            // ✅ Флаг для проверки, было ли приветствие отправлено
            let greetingSent = false;
        
        // ✅ Функция отправки приветствия при открытии чата
            function sendGreeting() {
                if (greetingSent) return; // Уже отправлено — не повторяем
        
                const messageArea = document.getElementById('chat-messages');
        
                const greeting = "Здравствуйте! Я — Финансовый Помощник. Задайте вопрос — помогу!";
        
                appendMessage(greeting, 'bot');
        
                greetingSent = true; // Помечаем, что приветствие отправлено
        }
        
            window.onload = function() {
                // При загрузке — чат открыт по умолчанию? Нет — скрываем его
                document.getElementById('chatbot-widget').style.display = 'none';
                document.getElementById('chat-open-btn').style.display = 'flex';
            };
        
            async function sendQuestion() {
                const input = document.getElementById('chat-input');
                const messageArea = document.getElementById('chat-messages');
                const question = input.value.trim();
        
                if (!question) return;
        
                appendMessage(question, 'user');
                input.value = '';
        
                appendMessage("🔍 Ищу информацию...", 'bot');
        
                try {
                    const response = await fetch('/chat-ask/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': getCookie('csrftoken')
                        },
                        body: JSON.stringify({ question: question })
                    });
        
                    const data = await response.json();
        
                    const lastMsg = messageArea.lastElementChild;
                    if (lastMsg && lastMsg.classList.contains('bot')) {
                        messageArea.removeChild(lastMsg);
                    }
        
                    if (data.error) {
                        appendMessage(`❌ ${data.error}`, 'bot');
                    } else {
                        appendMessage(data.answer, 'bot');
                    }
        
                } catch (error) {
                    const lastMsg = messageArea.lastElementChild;
                    if (lastMsg && lastMsg.classList.contains('bot')) {
                        messageArea.removeChild(lastMsg);
                    }
                    appendMessage("❌ Ошибка соединения с сервером.", 'bot');
                }
            }
        
            function appendMessage(text, sender) {
                const messageArea = document.getElementById('chat-messages');
                const msgDiv = document.createElement('div');
                msgDiv.style.marginBottom = '12px';
                msgDiv.style.maxWidth = '80%';
                msgDiv.style.padding = '10px 14px';
                msgDiv.style.borderRadius = sender === 'user' ? '18px 18px 0 18px' : '18px 18px 18px 0';
                msgDiv.style.backgroundColor = sender === 'user' ? '#6a7d5d' : '#f0f0f0';
                msgDiv.style.color = sender === 'user' ? 'white' : '#333';
                msgDiv.style.wordWrap = 'break-word';
                msgDiv.style.fontSize = '14px';
                msgDiv.style.alignSelf = sender === 'user' ? 'flex-end' : 'flex-start';
                msgDiv.textContent = text;
                msgDiv.className = sender;
                messageArea.appendChild(msgDiv);
                messageArea.scrollTop = messageArea.scrollHeight;
            }
        
            function getCookie(name) {
                let cookieValue = null;
                if (document.cookie && document.cookie !== '') {
                    const cookies = document.cookie.split(';');
                    for (let i = 0; i < cookies.length; i++) {
                        const cookie = cookies[i].trim();
                        if (cookie.substring(0, name.length + 1) === (name + '=')) {
                            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                            break;
                        }
                    }
                }
                return cookieValue;
            }
        
            document.getElementById('chat-input').addEventListener('keydown', function(e) {
                if (e.key === 'Enter') sendQuestion();
            });
        
            // Фикс: Показывать кнопку только если чат закрыт
            function updateChatButtonVisibility() {
                const widget = document.getElementById('chatbot-widget');
                const openBtn = document.getElementById('chat-open-btn');
        
                if (widget.style.display === 'none' || !widget.style.display) {
                    openBtn.style.display = 'flex';
                } else {
                    openBtn.style.display = 'none';
                }
            }
        
            // Обновляем состояние кнопки при каждом скролле и при открытии/закрытии
            window.addEventListener('scroll', updateChatButtonVisibility);
            window.addEventListener('load', updateChatButtonVisibility);
        
            // Добавляем обработчик на кнопку открытия
            document.getElementById('chat-open-btn').addEventListener('click', function() {
                toggleChat();
                // После открытия — скрываем кнопку
                updateChatButtonVisibility();
            });
        
            // Также обновляем при изменении размера окна (для мобильных)
            window.addEventListener('resize', updateChatButtonVisibility);
        
        </script>
        <style>
            #chatbot-widget {
                animation: slideIn 0.3s ease-out;
            }
            @keyframes slideIn {
                from { transform: translateX(300px); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
        </style>
        
        
            <footer class="bg-light text-center py-3 mt-5">
                <p class="mb-0">© 2025 Портал финансовой грамотности Удмуртии</p>
            </footer>
        
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        </body>
        </html>
        --- КОНЕЦ ---

    📁 core/
      📄 contacts.html
          --- СОДЕРЖИМОЕ ---
          {% extends 'base.html' %}
          
          {% block content %}
          <h1>Контакты</h1>
          <div class="row">
              {% for contact in contacts %}
                  <div class="col-md-6 mb-4">
                      <div class="card">
                          <div class="card-body">
                              <h5 class="card-title">{{ contact.name }}</h5>
                              <p><strong>Адрес:</strong> {{ contact.address }}</p>
                              <p><strong>Телефон:</strong> {{ contact.phone }}</p>
                              {% if contact.email %}
                                  <p><strong>Email:</strong> {{ contact.email }}</p>
                              {% endif %}
                              <p class="text-muted">Аудитория: {{ contact.audience }}</p>
                          </div>
                      </div>
                  </div>
              {% endfor %}
          </div>
          {% endblock %}
          --- КОНЕЦ ---

      📄 events.html
          --- СОДЕРЖИМОЕ ---
          {% extends 'base.html' %}
          
          {% block content %}
          <h1>События</h1>
          <div class="row">
              {% for event in events %}
                  <div class="col-md-6 mb-4">
                      <div class="card">
                          <div class="card-body">
                              <h5 class="card-title">{{ event.title }}</h5>
                              <p><strong>Дата:</strong> {{ event.date|date:"d.m.Y" }}</p>
                              <p><strong>Место:</strong> {{ event.location }}</p>
                              <p>{{ event.description|truncatewords:20 }}</p>
                              <p class="text-muted">Для: {{ event.audience }}</p>
                          </div>
                      </div>
                  </div>
              {% empty %}
                  <p>События не найдены.</p>
              {% endfor %}
          </div>
          {% endblock %}
          --- КОНЕЦ ---

      📄 home.html
          --- СОДЕРЖИМОЕ ---
          {% extends 'base.html' %}
          
          {% block content %}
          <h1 class="mb-4">Добро пожаловать на портал финансовой грамотности Удмуртии!</h1>
          
          <div class="row mb-5">
              <div class="col-md-8">
                  <p>Здесь вы найдете полезные материалы, курсы и контакты для повышения вашей финансовой грамотности.</p>
                  <a href="{% url 'courses:list' %}" class="btn btn-primary">Начать обучение</a>
              </div>
              <div class="col-md-4">
                  <div class="card">
                      <div class="card-body">
                          <h5 class="card-title">Ближайшие события</h5>
                          {% for event in events %}
                              <p class="card-text"><strong>{{ event.title }}</strong><br>{{ event.date|date:"d.m.Y" }} в {{ event.location }}</p>
                          {% empty %}
                              <p>События пока не запланированы.</p>
                          {% endfor %}
                      </div>
                  </div>
              </div>
          </div>
          
          <h3>Популярные курсы</h3>
          <div class="row">
              {% for course in courses %}
                  <div class="col-md-4 mb-4">
                      <div class="card h-100">
                          <div class="card-body">
                              <h5 class="card-title">{{ course.title }}</h5>
                              <p class="card-text">{{ course.description|truncatewords:15 }}</p>
                              <a href="{% url 'courses:detail' course.id %}" class="btn btn-outline-primary">Подробнее</a>
                          </div>
                      </div>
                  </div>
              {% endfor %}
          </div>
          {% endblock %}
          --- КОНЕЦ ---

      📄 login.html
          --- СОДЕРЖИМОЕ ---
          {% extends 'base.html' %}
          {% block content %}
          <div class="row justify-content-center">
              <div class="col-md-6">
                  <div class="card">
                      <div class="card-header"><h3>Вход</h3></div>
                      <div class="card-body">
                          {% if messages %}
                              {% for message in messages %}
                                  <div class="alert alert-{{ message.tags }}">{{ message }}</div>
                              {% endfor %}
                          {% endif %}
                          <form method="post">
                              {% csrf_token %}
                              <div class="mb-3">
                                  <label>Email</label>
                                  <input type="email" name="email" class="form-control" required>
                              </div>
                              <div class="mb-3">
                                  <label>Пароль</label>
                                  <input type="password" name="password" class="form-control" required>
                              </div>
                              <button type="submit" class="btn btn-primary w-100">Войти</button>
                          </form>
                          <div class="text-center mt-3">
                              Нет аккаунта? <a href="{% url 'core:register' %}">Зарегистрироваться</a>
                          </div>
                      </div>
                  </div>
              </div>
          </div>
          {% endblock %}
          --- КОНЕЦ ---

      📄 profile.html
          --- СОДЕРЖИМОЕ ---
          {% extends 'base.html' %}
          {% load widget_tweaks %}
          {% block content %}
          <h2>Личный кабинет</h2>
          <div class="alert alert-info">
              Привет, <strong>{{ user.email }}</strong>!
          </div>
          
          <form method="post">
              {% csrf_token %}
              {% for field in form %}
                  <div class="mb-3">
                      {{ field.label_tag }}
                      {{ field }}
                      {% if field.help_text %}
                          <small class="form-text text-muted">{{ field.help_text }}</small>
                      {% endif %}
                  </div>
              {% endfor %}
              <button type="submit" class="btn btn-success">Сохранить изменения</button>
          </form>
          
          <hr>
          <a href="{% url 'core:logout' %}" class="btn btn-outline-danger">Выйти</a>
          {% endblock %}
          --- КОНЕЦ ---

      📄 register.html
          --- СОДЕРЖИМОЕ ---
          {% extends 'base.html' %}
          {% load widget_tweaks %}
          {% block content %}
          <div class="row justify-content-center">
              <div class="col-md-6">
                  <div class="card">
                      <div class="card-header"><h3>Регистрация</h3></div>
                      <div class="card-body">
                          {% if messages %}
                              {% for message in messages %}
                                  <div class="alert alert-{{ message.tags }}">{{ message }}</div>
                              {% endfor %}
                          {% endif %}
                          <form method="post">
                              {% csrf_token %}
                              <div class="mb-3">
                                  {{ form.email.label_tag }}
                                  {{ form.email|add_class:"form-control" }}
                                  {% if form.email.errors %}<div class="text-danger">{{ form.email.errors }}</div>{% endif %}
                              </div>
                              <div class="mb-3">
                                  {{ form.password1.label_tag }}
                                  {{ form.password1|add_class:"form-control" }}
                                  {% if form.password1.errors %}<div class="text-danger">{{ form.password1.errors }}</div>{% endif %}
                              </div>
                              <div class="mb-3">
                                  {{ form.password2.label_tag }}
                                  {{ form.password2|add_class:"form-control" }}
                                  {% if form.password2.errors %}<div class="text-danger">{{ form.password2.errors }}</div>{% endif %}
                              </div>
                              <button type="submit" class="btn btn-primary w-100">Зарегистрироваться</button>
                          </form>
                          <div class="text-center mt-3">
                              Уже есть аккаунт? <a href="{% url 'core:login' %}">Войти</a>
                          </div>
                      </div>
                  </div>
              </div>
          </div>
          {% endblock %}
          --- КОНЕЦ ---

    📁 courses/
      📄 detail.html
          --- СОДЕРЖИМОЕ ---
          {% extends 'base.html' %}
          
          {% block content %}
          <h1>{{ course.title }}</h1>
          <p>{{ course.description }}</p>
          
          <h3>Уроки</h3>
          <div class="list-group">
              {% for lesson in course.lessons.all %}
                  <a href="{% url 'courses:lesson' lesson.id %}" class="list-group-item list-group-item-action">
                      {{ lesson.title }}
                  </a>
              {% empty %}
                  <p>Уроки пока не добавлены.</p>
              {% endfor %}
          </div>
          {% endblock %}
          --- КОНЕЦ ---

      📄 lesson.html
          --- СОДЕРЖИМОЕ ---
          {% extends 'base.html' %}
          
          {% block content %}
          <h1>{{ lesson.title }}</h1>
          <div class="mb-4">{{ lesson.content|safe }}</div>
          
          {% if lesson.video_url %}
          <div class="ratio ratio-16x9 mb-4">
              <iframe src="{{ lesson.video_url }}" title="Видеоурок">
              </iframe>
          </div>
          {% endif %}
          
          {% if lesson.questions.exists %}
          <h3>Тест</h3>
          <form method="post" action="{% url 'courses:test' lesson.id %}">
              {% csrf_token %}
              {% for q in questions %}
              <div class="card mb-3">
                  <div class="card-body">
                      <p><strong>{{ forloop.counter }}. {{ q.text }}</strong></p>
                      <div class="form-check">
                          <input class="form-check-input" type="radio" name="q{{ q.id }}" value="A" id="q{{ q.id }}a" required>
                          <label class="form-check-label" for="q{{ q.id }}a">{{ q.option_a }}</label>
                      </div>
                      <div class="form-check">
                          <input class="form-check-input" type="radio" name="q{{ q.id }}" value="B" id="q{{ q.id }}b">
                          <label class="form-check-label" for="q{{ q.id }}b">{{ q.option_b }}</label>
                      </div>
                      {% if q.option_c %}
                      <div class="form-check">
                          <input class="form-check-input" type="radio" name="q{{ q.id }}" value="C" id="q{{ q.id }}c">
                          <label class="form-check-label" for="q{{ q.id }}c">{{ q.option_c }}</label>
                      </div>
                      {% endif %}
                      {% if q.option_d %}
                      <div class="form-check">
                          <input class="form-check-input" type="radio" name="q{{ q.id }}" value="D" id="q{{ q.id }}d">
                          <label class="form-check-label" for="q{{ q.id }}d">{{ q.option_d }}</label>
                      </div>
                      {% endif %}
                  </div>
              </div>
              {% endfor %}
              <button type="submit" class="btn btn-success">Проверить результаты</button>
          </form>
          {% endif %}
          {% endblock %}
          --- КОНЕЦ ---

      📄 list.html
          --- СОДЕРЖИМОЕ ---
          {% extends 'base.html' %}
          
          {% block content %}
          <h1>Курсы</h1>
          
          <form method="get" class="mb-4">
              <div class="row">
                  <div class="col-md-4">
                      <select name="audience" class="form-select">
                          <option value="">Все аудитории</option>
                          <option value="школьник" {% if request.GET.audience == 'школьник' %}selected{% endif %}>Школьники</option>
                          <option value="пенсионер" {% if request.GET.audience == 'пенсионер' %}selected{% endif %}>Пенсионеры</option>
                          <option value="МСП" {% if request.GET.audience == 'МСП' %}selected{% endif %}>МСП</option>
                      </select>
                  </div>
                  <div class="col-md-4">
                      <select name="format" class="form-select">
                          <option value="">Все форматы</option>
                          <option value="текст" {% if request.GET.format == 'текст' %}selected{% endif %}>Текст</option>
                          <option value="видео" {% if request.GET.format == 'видео' %}selected{% endif %}>Видео</option>
                          <option value="тест" {% if request.GET.format == 'тест' %}selected{% endif %}>Тест</option>
                      </select>
                  </div>
                  <div class="col-md-4">
                      <button type="submit" class="btn btn-primary w-100">Применить фильтры</button>
                  </div>
              </div>
          </form>
          
          <div class="row">
              {% for course in courses %}
                  <div class="col-md-4 mb-4">
                      <div class="card">
                          <div class="card-body">
                              <h5 class="card-title">{{ course.title }}</h5>
                              <p class="text-muted">Для: {{ course.audience }} | Формат: {{ course.format_type }}</p>
                              <p>{{ course.description|truncatewords:10 }}</p>
                              <a href="{% url 'courses:detail' course.id %}" class="btn btn-primary">Открыть</a>
                          </div>
                      </div>
                  </div>
              {% empty %}
                  <p>Курсы не найдены.</p>
              {% endfor %}
          </div>
          {% endblock %}
          --- КОНЕЦ ---

      📄 result.html
          --- СОДЕРЖИМОЕ ---
          {% extends 'base.html' %}
          
          {% block content %}
          <div class="text-center">
              <h1>Результаты теста</h1>
              <div class="display-1 text-success">{{ score }} / {{ total }}</div>
              <p class="lead">Процент правильных ответов: <strong>{{ percent }}%</strong></p>
              <a href="{% url 'courses:lesson' lesson.id %}" class="btn btn-primary">Повторить урок</a>
              <a href="{% url 'courses:list' %}" class="btn btn-outline-secondary">К курсам</a>
          </div>
          {% endblock %}
          --- КОНЕЦ ---

    📁 search/
      📄 results.html
          --- СОДЕРЖИМОЕ ---
          {% extends 'base.html' %}
          
          {% block content %}
          <h1>Результаты поиска для: "{{ query }}"</h1>
          
          <h3>Курсы</h3>
          <div class="row">
              {% for course in courses %}
                  <div class="col-md-4 mb-3">
                      <div class="card">
                          <div class="card-body">
                              <h5>{{ course.title }}</h5>
                              <p class="text-muted">{{ course.audience }} | {{ course.format_type }}</p>
                              <a href="{% url 'courses:detail' course.id %}" class="btn btn-sm btn-outline-primary">Открыть</a>
                          </div>
                      </div>
                  </div>
              {% empty %}
                  <p>Курсы не найдены.</p>
              {% endfor %}
          </div>
          
          <h3>Контакты</h3>
          <div class="row">
              {% for contact in contacts %}
                  <div class="col-md-6 mb-3">
                      <div class="card">
                          <div class="card-body">
                              <h5>{{ contact.name }}</h5>
                              <p>{{ contact.address }}</p>
                              <p>{{ contact.phone }}</p>
                          </div>
                      </div>
                  </div>
              {% empty %}
                  <p>Контакты не найдены.</p>
              {% endfor %}
          </div>
          
          <h3>События</h3>
          <div class="row">
              {% for event in events %}
                  <div class="col-md-6 mb-3">
                      <div class="card">
                          <div class="card-body">
                              <h5>{{ event.title }}</h5>
                              <p>{{ event.date|date:"d.m.Y" }} — {{ event.location }}</p>
                          </div>
                      </div>
                  </div>
              {% empty %}
                  <p>События не найдены.</p>
              {% endfor %}
          </div>
          {% endblock %}
          --- КОНЕЦ ---

📄 project_structure.txt (бинарный, пропущен)
📄 requirements.txt
    ❗ Не удалось прочитать (неподдерживаемая кодировка)

📄 vibe_maker.py (бинарный, пропущен)
