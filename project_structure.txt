=== –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:  ===
–ü—É—Ç—å: C:\Users\ilagr\PycharmProjects\hackaton\cyberforum
============================================================

üìÅ .git/
  üìÑ config (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
  üìÑ description (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
  üìÑ HEAD (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
  üìÅ hooks/
    üìÑ applypatch-msg.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ commit-msg.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ fsmonitor-watchman.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ post-update.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ pre-applypatch.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ pre-commit.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ pre-merge-commit.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ pre-push.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ pre-rebase.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ pre-receive.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ prepare-commit-msg.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ push-to-checkout.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ sendemail-validate.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ update.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
  üìÑ index (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
  üìÅ info/
    üìÑ exclude (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
  üìÅ logs/
    üìÑ HEAD (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÅ refs/
      üìÅ heads/
        üìÑ main (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÅ remotes/
        üìÅ origin/
          üìÑ HEAD (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
  üìÅ objects/
    üìÅ info/
    üìÅ pack/
      üìÑ pack-94a7ee2f43268eff4999f8595bb8161f04755458.idx (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ pack-94a7ee2f43268eff4999f8595bb8161f04755458.pack (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ pack-94a7ee2f43268eff4999f8595bb8161f04755458.rev (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
  üìÑ packed-refs (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
  üìÅ refs/
    üìÅ heads/
      üìÑ main (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÅ remotes/
      üìÅ origin/
        üìÑ HEAD (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÅ tags/
üìÅ .idea/
  üìÑ .gitignore
      --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
      # Default ignored files
      /shelf/
      /workspace.xml
      --- –ö–û–ù–ï–¶ ---

üìÅ cyberforum/
  üìÅ core/
    üìÑ __init__.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        --- –ö–û–ù–ï–¶ ---

    üìÅ __pycache__/
      üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ admin.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ apps.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ models.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ urls.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ views.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ admin.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.contrib import admin
        from .models import Contact, Event
        
        @admin.register(Contact)
        class ContactAdmin(admin.ModelAdmin):
            list_display = ['name', 'phone', 'email', 'audience']
            search_fields = ['name', 'address']
            list_filter = ['audience']
        
        @admin.register(Event)
        class EventAdmin(admin.ModelAdmin):
            list_display = ['title', 'date', 'location', 'audience']
            list_filter = ['audience', 'date']
            date_hierarchy = 'date'
        --- –ö–û–ù–ï–¶ ---

    üìÑ apps.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.apps import AppConfig
        
        
        class CoreConfig(AppConfig):
            default_auto_field = 'django.db.models.BigAutoField'
            name = 'core'
        --- –ö–û–ù–ï–¶ ---

    üìÅ llm_assistant/
      üìÑ __init__.py
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          --- –ö–û–ù–ï–¶ ---

      üìÅ __pycache__/
        üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ indexer.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ loader.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ model.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ rag.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ utils.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÅ docs/
        üìÑ Keys_Web-razrabotka.pdf (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ indexer.py
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          import os
          from pathlib import Path
          
          from langchain_community.vectorstores import FAISS
          from langchain_community.embeddings import HuggingFaceEmbeddings
          from langchain_text_splitters import RecursiveCharacterTextSplitter
          from .loader import load_documents_from_folder
          from .utils import clean_text, count_tokens
          
          INDEX_DIR = "faiss_index"
          
          CURRENT_DIR = Path(__file__).parent
          DOCS_DIR = CURRENT_DIR / "docs"
          
          def create_or_load_vectorstore():
              """
              –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É.
              –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Django.
              """
              embedding_model = HuggingFaceEmbeddings(
                  model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
              )
          
              if os.path.exists(INDEX_DIR):
                  print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...")
                  vectorstore = FAISS.load_local(
                      INDEX_DIR,
                      embedding_model,
                      allow_dangerous_deserialization=True
                  )
                  print("‚úÖ –ò–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω.")
              else:
                  print("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...")
                  documents = load_documents_from_folder(DOCS_DIR)
                  if not documents:
                      raise RuntimeError("–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏!")
          
                  splitter = RecursiveCharacterTextSplitter(
                      chunk_size=500,
                      chunk_overlap=100,
                      length_function=count_tokens,
                      separators=["\n\n", "\n", ". ", "! ", "? ", " ", ""],
                  )
          
                  chunks = splitter.split_documents(documents)
                  for chunk in chunks:
                      chunk.page_content = clean_text(chunk.page_content)
          
                  vectorstore = FAISS.from_documents(chunks, embedding_model)
                  vectorstore.save_local(INDEX_DIR)
                  print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {INDEX_DIR}/")
          
              return vectorstore
          --- –ö–û–ù–ï–¶ ---

      üìÑ loader.py
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          from pathlib import Path
          from typing import List
          from langchain_community.document_loaders import (
              TextLoader,
              PyMuPDFLoader,
              Docx2txtLoader,
          )
          
          SUPPORTED_EXTENSIONS = {".txt", ".pdf", ".docx"}
          
          def load_documents_from_folder(folder_path: str) -> List:
              documents = []
              folder = Path(folder_path)
              if not folder.exists():
                  raise FileNotFoundError(f"–ü–∞–ø–∫–∞ {folder_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
          
              for file_path in folder.iterdir():
                  if file_path.is_file() and file_path.suffix.lower() in SUPPORTED_EXTENSIONS:
                      print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é: {file_path.name}")
                      if file_path.suffix.lower() == ".txt":
                          loader = TextLoader(file_path, encoding="utf-8")
                      elif file_path.suffix.lower() == ".pdf":
                          loader = PyMuPDFLoader(file_path)
                      elif file_path.suffix.lower() == ".docx":
                          loader = Docx2txtLoader(file_path)
                      else:
                          continue
          
                      docs = loader.load()
                      for doc in docs:
                          doc.metadata["source"] = file_path.name
                          doc.metadata["file_type"] = file_path.suffix.lower()[1:]
                      documents.extend(docs)
          
              if not documents:
                  print("‚ö†Ô∏è  –í –ø–∞–ø–∫–µ docs –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ (.txt, .pdf, .docx)")
              else:
                  print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
          
              return documents
          --- –ö–û–ù–ï–¶ ---

      üìÑ model.py
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          import os
          from langchain_gigachat.chat_models import GigaChat
          
          # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á –≤ .env –∏–ª–∏ –∑–¥–µ—Å—å (–ª—É—á—à–µ —á–µ—Ä–µ–∑ .env)
          os.environ["GIGACHAT_CREDENTIALS"] = "NGRiZjA5MmMtYmJkOS00NzkzLWJlZGQtM2UzYWFlZTNiNWMwOjlmMjQ0MjU5LWUxM2YtNGUyYy1iYTg1LWFlOTlhZDhjMWUzOQ=="
          
          llm = GigaChat(
              model="GigaChat-Pro",
              verify_ssl_certs=False,
              timeout=60
          )
          --- –ö–û–ù–ï–¶ ---

      üìÑ rag.py
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          from .model import llm
          from .indexer import create_or_load_vectorstore
          from langchain_core.prompts import ChatPromptTemplate
          from langchain_core.output_parsers import StrOutputParser
          
          # –ü—Ä–æ–º–ø—Ç ‚Äî –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ —Å—é–¥–∞, —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –º–µ–Ω—è—Ç—å
          PROMPT_TEMPLATE = """
          –í—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
          –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–∫–∞–∂–∏—Ç–µ: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞".
          (–£—á—Ç–∏, —á—Ç–æ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ html —Å—Ç—Ä–∞–Ω–∏—Ü–µ, —Ç–æ –µ—Å—Ç—å –Ω–∞–ø—Ä–∏–º–µ—Ä 
          –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ** –∏ html-—Ç—ç–≥–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∂–∏—Ä–Ω—ã–º –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è. –õ—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç 
          –±–µ–∑ –≤—ã–¥–µ–ª–µ–Ω–∏–π, —á–µ–º —Å –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏)
          –ö–æ–Ω—Ç–µ–∫—Å—Ç:
          {context}
          
          –í–æ–ø—Ä–æ—Å:
          {question}
          
          –û—Ç–≤–µ—Ç:
          """
          
          prompt = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)
          chain = prompt | llm | StrOutputParser()
          
          def generate_answer(question: str, top_k: int = 3) -> str:
              """
              –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG.
              –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ Django view.
              """
              # –ò–Ω–¥–µ–∫—Å —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
              # –ú—ã –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –µ–≥–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑!
              vectorstore = create_or_load_vectorstore()
          
              relevant_docs = vectorstore.similarity_search(question, k=top_k)
          
              context = "\n\n".join([
                  f"–ò—Å—Ç–æ—á–Ω–∏–∫: {doc.metadata['source']} (—Ç–∏–ø: {doc.metadata['file_type']})\n{doc.page_content}"
                  for doc in relevant_docs
              ])
          
              response = chain.invoke({
                  "context": context,
                  "question": question
              })
          
              return response
          --- –ö–û–ù–ï–¶ ---

      üìÑ utils.py
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          import re
          from bs4 import BeautifulSoup
          
          def clean_text(text: str) -> str:
              soup = BeautifulSoup(text, "html.parser")
              text = soup.get_text()
              text = re.sub(r'\s+', ' ', text)
              text = re.sub(r'[\u200b-\u200d\uFEFF]', '', text)
              text = re.sub(r'—Å—Ç—Ä–∞–Ω–∏—Ü[–∞-—ã]?\s*\d+\s*–∏–∑\s*\d+', '', text, flags=re.IGNORECASE)
              text = re.sub(r'http\S+|www\S+|https\S+', '', text, flags=re.MULTILINE)
              text = re.sub(r'[^\w\s.,!?;:()\-\‚Äì‚Äî\"\'\n]', ' ', text)
              return text.strip()
          
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É, —á—Ç–æ –∏ —É GigaChat (GPT-4)
          try:
              import tiktoken
              encoder = tiktoken.encoding_for_model("gpt-4")
          except ImportError:
              encoder = None
          
          def count_tokens(text: str) -> int:
              if encoder is None:
                  return len(text.split()) * 1.3  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
              return len(encoder.encode(text))
          --- –ö–û–ù–ï–¶ ---

    üìÅ management/
      üìÅ commands/
        üìÑ initdata.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.core.management.base import BaseCommand
            from core.models import Contact, Event
            from courses.models import Course, Lesson, Question
            
            class Command(BaseCommand):
                help = '–ó–∞–ø–æ–ª–Ω—è–µ—Ç –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏'
            
                def handle(self, *args, **kwargs):
                    # –û—á–∏—Å—Ç–∫–∞
                    Contact.objects.all().delete()
                    Event.objects.all().delete()
                    Course.objects.all().delete()
            
                    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
                    Contact.objects.create(
                        name="–¶–µ–Ω—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –ò–∂–µ–≤—Å–∫",
                        address="—É–ª. –ü—É—à–∫–∏–Ω—Å–∫–∞—è, 100",
                        phone="+7 (3412) 12-34-56",
                        audience="–≤—Å–µ"
                    )
            
                    # –°–æ–±—ã—Ç–∏—è
                    from datetime import date
                    Event.objects.create(
                        title="–î–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –≤ —à–∫–æ–ª–µ ‚Ññ1",
                        description="–û—Ç–∫—Ä—ã—Ç—ã–π —É—Ä–æ–∫ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ 8-11 –∫–ª–∞—Å—Å–æ–≤",
                        date=date(2025, 4, 20),
                        location="–®–∫–æ–ª–∞ ‚Ññ1, –ò–∂–µ–≤—Å–∫",
                        audience="—à–∫–æ–ª—å–Ω–∏–∫"
                    )
            
                    # –ö—É—Ä—Å—ã
                    course1 = Course.objects.create(
                        title="–°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç",
                        description="–ù–∞—É—á–∏—Ç–µ—Å—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã —Å–µ–º—å–∏.",
                        audience="–≤—Å–µ",
                        format_type="—Ç–µ–∫—Å—Ç"
                    )
                    lesson1 = Lesson.objects.create(
                        course=course1,
                        title="–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –±—é–¥–∂–µ—Ç",
                        content="<p>–®–∞–≥ 1: –£—á–µ—Ç –≤—Å–µ—Ö –¥–æ—Ö–æ–¥–æ–≤...</p>",
                        video_url="https://www.youtube.com/embed/dQw4w9WgXcQ",
                        order=1
                    )
                    Question.objects.create(
                        lesson=lesson1,
                        text="–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã?",
                        option_a="–ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è",
                        option_b="–ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                        option_c="–û—Ç–ø—É—Å–∫",
                        correct_answer="A"
                    )
            
                    self.stdout.write(self.style.SUCCESS('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!'))
            --- –ö–û–ù–ï–¶ ---

    üìÅ migrations/
      üìÑ 0001_initial.py
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          # Generated by Django 5.2.6 on 2025-09-21 14:04
          
          from django.db import migrations, models
          
          
          class Migration(migrations.Migration):
          
              initial = True
          
              dependencies = [
              ]
          
              operations = [
                  migrations.CreateModel(
                      name='Contact',
                      fields=[
                          ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                          ('name', models.CharField(max_length=200)),
                          ('address', models.TextField()),
                          ('phone', models.CharField(max_length=50)),
                          ('email', models.EmailField(blank=True, max_length=254)),
                          ('audience', models.CharField(max_length=50)),
                      ],
                  ),
                  migrations.CreateModel(
                      name='Event',
                      fields=[
                          ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                          ('title', models.CharField(max_length=200)),
                          ('description', models.TextField()),
                          ('date', models.DateField()),
                          ('location', models.CharField(max_length=200)),
                          ('audience', models.CharField(max_length=50)),
                      ],
                  ),
              ]
          --- –ö–û–ù–ï–¶ ---

      üìÑ __init__.py
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          --- –ö–û–ù–ï–¶ ---

      üìÅ __pycache__/
        üìÑ 0001_initial.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ models.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.db import models
        
        class Contact(models.Model):
            name = models.CharField(max_length=200)
            address = models.TextField()
            phone = models.CharField(max_length=50)
            email = models.EmailField(blank=True)
            audience = models.CharField(max_length=50)  # –≤—Å–µ, —à–∫–æ–ª—å–Ω–∏–∫–∏, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã
        
            def __str__(self):
                return self.name
        
        class Event(models.Model):
            title = models.CharField(max_length=200)
            description = models.TextField()
            date = models.DateField()
            location = models.CharField(max_length=200)
            audience = models.CharField(max_length=50)
        
            def __str__(self):
                return self.title
        --- –ö–û–ù–ï–¶ ---

    üìÑ tests.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.test import TestCase
        
        # Create your tests here.
        --- –ö–û–ù–ï–¶ ---

    üìÑ urls.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.urls import path
        from . import views
        
        app_name = 'core'
        
        urlpatterns = [
            path('', views.home_view, name='home'),
            path('contacts/', views.contacts_view, name='contacts'),
            path('events/', views.events_view, name='events'),
            path('chat-ask/', views.chat_ask, name='chat_ask'),
        ]
        --- –ö–û–ù–ï–¶ ---

    üìÑ views.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        import json
        
        from django.http import JsonResponse
        from django.shortcuts import render
        from django.views.decorators.csrf import csrf_exempt
        
        from .llm_assistant.rag import generate_answer
        from .models import Contact, Event
        from courses.models import Course
        
        
        
        def home_view(request):
            courses = Course.objects.all()[:6]
            upcoming_events = Event.objects.order_by('date')[:3]
            return render(request, 'core/home.html', {
                'courses': courses,
                'events': upcoming_events,
            })
        
        
        def contacts_view(request):
            contacts = Contact.objects.all()
            return render(request, 'core/contacts.html', {'contacts': contacts})
        
        
        def events_view(request):
            events = Event.objects.order_by('date')
            return render(request, 'core/events.html', {'events': events})
        
        
        @csrf_exempt
        def chat_ask(request):
            if request.method != 'POST':
                return JsonResponse({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}, status=405)
        
            try:
                data = json.loads(request.body)
                question = data.get('question', '').strip()
        
                if not question:
                    return JsonResponse({'error': '–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}, status=400)
        
                answer = generate_answer(question)
        
                return JsonResponse({'answer': answer})
        
            except Exception as e:
                return JsonResponse({'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}, status=500)
        --- –ö–û–ù–ï–¶ ---

  üìÅ courses/
    üìÑ __init__.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        --- –ö–û–ù–ï–¶ ---

    üìÅ __pycache__/
      üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ admin.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ apps.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ models.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ urls.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ views.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ admin.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.contrib import admin
        from .models import Course, Lesson, Question
        
        class LessonInline(admin.TabularInline):
            model = Lesson
            extra = 1
        
        class QuestionInline(admin.TabularInline):
            model = Question
            extra = 1
        
        @admin.register(Course)
        class CourseAdmin(admin.ModelAdmin):
            list_display = ['title', 'audience', 'format_type', 'created_at']
            list_filter = ['audience', 'format_type']
            search_fields = ['title', 'description']
            inlines = [LessonInline]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ä–æ–∫–∏ –ø—Ä—è–º–æ –≤–Ω—É—Ç—Ä–∏ –∫—É—Ä—Å–∞
        
        @admin.register(Lesson)
        class LessonAdmin(admin.ModelAdmin):
            list_display = ['title', 'course', 'order']
            list_filter = ['course']
            search_fields = ['title', 'content']
            inlines = [QuestionInline]  # –í–æ–ø—Ä–æ—Å—ã –≤–Ω—É—Ç—Ä–∏ —É—Ä–æ–∫–∞
        
        @admin.register(Question)
        class QuestionAdmin(admin.ModelAdmin):
            list_display = ['text', 'lesson', 'correct_answer']
            list_filter = ['lesson__course']
            search_fields = ['text']
        --- –ö–û–ù–ï–¶ ---

    üìÑ apps.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.apps import AppConfig
        
        
        class CoursesConfig(AppConfig):
            default_auto_field = 'django.db.models.BigAutoField'
            name = 'courses'
        --- –ö–û–ù–ï–¶ ---

    üìÅ migrations/
      üìÑ 0001_initial.py
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          # Generated by Django 5.2.6 on 2025-09-21 14:04
          
          import django.db.models.deletion
          from django.db import migrations, models
          
          
          class Migration(migrations.Migration):
          
              initial = True
          
              dependencies = [
              ]
          
              operations = [
                  migrations.CreateModel(
                      name='Course',
                      fields=[
                          ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                          ('title', models.CharField(max_length=200)),
                          ('description', models.TextField()),
                          ('audience', models.CharField(max_length=50)),
                          ('format_type', models.CharField(max_length=50)),
                          ('created_at', models.DateTimeField(auto_now_add=True)),
                      ],
                  ),
                  migrations.CreateModel(
                      name='Lesson',
                      fields=[
                          ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                          ('title', models.CharField(max_length=200)),
                          ('content', models.TextField()),
                          ('video_url', models.URLField(blank=True, null=True)),
                          ('order', models.IntegerField(default=1)),
                          ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='courses.course')),
                      ],
                  ),
                  migrations.CreateModel(
                      name='Question',
                      fields=[
                          ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                          ('text', models.CharField(max_length=300)),
                          ('option_a', models.CharField(max_length=200)),
                          ('option_b', models.CharField(max_length=200)),
                          ('option_c', models.CharField(blank=True, max_length=200)),
                          ('option_d', models.CharField(blank=True, max_length=200)),
                          ('correct_answer', models.CharField(max_length=1)),
                          ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='courses.lesson')),
                      ],
                  ),
              ]
          --- –ö–û–ù–ï–¶ ---

      üìÑ __init__.py
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          --- –ö–û–ù–ï–¶ ---

      üìÅ __pycache__/
        üìÑ 0001_initial.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ models.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.db import models
        
        class Course(models.Model):
            title = models.CharField(max_length=200)
            description = models.TextField()
            audience = models.CharField(max_length=50)  # —à–∫–æ–ª—å–Ω–∏–∫, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä, –ú–°–ü
            format_type = models.CharField(max_length=50)  # —Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ, —Ç–µ—Å—Ç
            created_at = models.DateTimeField(auto_now_add=True)
        
            def __str__(self):
                return self.title
        
        class Lesson(models.Model):
            course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='lessons')
            title = models.CharField(max_length=200)
            content = models.TextField()
            video_url = models.URLField(blank=True, null=True)  # YouTube
            order = models.IntegerField(default=1)
        
            def __str__(self):
                return f"{self.course.title} - {self.title}"
        
        class Question(models.Model):
            lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE, related_name='questions')
            text = models.CharField(max_length=300)
            option_a = models.CharField(max_length=200)
            option_b = models.CharField(max_length=200)
            option_c = models.CharField(max_length=200, blank=True)
            option_d = models.CharField(max_length=200, blank=True)
            correct_answer = models.CharField(max_length=1)  # A, B, C, D
        
            def __str__(self):
                return self.text
        --- –ö–û–ù–ï–¶ ---

    üìÑ tests.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.test import TestCase
        
        # Create your tests here.
        --- –ö–û–ù–ï–¶ ---

    üìÑ urls.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.urls import path
        from . import views
        
        app_name = 'courses'
        
        urlpatterns = [
            path('', views.course_list_view, name='list'),
            path('<int:course_id>/', views.course_detail_view, name='detail'),
            path('lesson/<int:lesson_id>/', views.lesson_view, name='lesson'),
            path('lesson/<int:lesson_id>/test/', views.submit_test_view, name='test'),
        ]
        --- –ö–û–ù–ï–¶ ---

    üìÑ views.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.shortcuts import render, get_object_or_404, redirect
        from .models import Course, Lesson, Question
        
        def course_list_view(request):
            courses = Course.objects.all()
            return render(request, 'courses/list.html', {'courses': courses})
        
        def course_detail_view(request, course_id):
            course = get_object_or_404(Course, id=course_id)
            return render(request, 'courses/detail.html', {'course': course})
        
        def lesson_view(request, lesson_id):
            lesson = get_object_or_404(Lesson, id=lesson_id)
            questions = lesson.questions.all()
            return render(request, 'courses/lesson.html', {
                'lesson': lesson,
                'questions': questions,
            })
        
        def submit_test_view(request, lesson_id):
            lesson = get_object_or_404(Lesson, id=lesson_id)
            questions = lesson.questions.all()
            total = questions.count()
            correct = 0
        
            if request.method == "POST":
                for q in questions:
                    user_answer = request.POST.get(f'q{q.id}')
                    if user_answer == q.correct_answer:
                        correct += 1
        
                score_percent = int((correct / total) * 100) if total > 0 else 0
                return render(request, 'courses/result.html', {
                    'score': correct,
                    'total': total,
                    'percent': score_percent,
                    'lesson': lesson,
                })
        
            return redirect('courses:lesson', lesson_id=lesson_id)
        --- –ö–û–ù–ï–¶ ---

  üìÅ cyberforum/
    üìÑ __init__.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        --- –ö–û–ù–ï–¶ ---

    üìÅ __pycache__/
      üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ settings.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ urls.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ wsgi.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ asgi.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        """
        ASGI config for cyberforum project.
        
        It exposes the ASGI callable as a module-level variable named ``application``.
        
        For more information on this file, see
        https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
        """
        
        import os
        
        from django.core.asgi import get_asgi_application
        
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cyberforum.settings')
        
        application = get_asgi_application()
        --- –ö–û–ù–ï–¶ ---

    üìÑ settings.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        """
        Django settings for cyberforum project.
        
        Generated by 'django-admin startproject' using Django 5.2.6.
        
        For more information on this file, see
        https://docs.djangoproject.com/en/5.2/topics/settings/
        
        For the full list of settings and their values, see
        https://docs.djangoproject.com/en/5.2/ref/settings/
        """
        
        from pathlib import Path
        
        # Build paths inside the project like this: BASE_DIR / 'subdir'.
        BASE_DIR = Path(__file__).resolve().parent.parent
        
        
        # Quick-start development settings - unsuitable for production
        # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
        
        # SECURITY WARNING: keep the secret key used in production secret!
        SECRET_KEY = 'django-insecure-l#=@!evoxr(qh0c#lbm==+7=1q*^youjnqlb1h@$4)iz3bw@$r'
        
        # SECURITY WARNING: don't run with debug turned on in production!
        DEBUG = True
        
        ALLOWED_HOSTS = []
        
        
        # Application definition
        
        INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'core',
            'courses',
            'search',
            'crispy_forms',
            'widget_tweaks',
        ]
        
        MIDDLEWARE = [
            'django.middleware.security.SecurityMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
        ]
        
        ROOT_URLCONF = 'cyberforum.urls'
        
        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': ['templates'],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]
        
        WSGI_APPLICATION = 'cyberforum.wsgi.application'
        
        
        # Database
        # https://docs.djangoproject.com/en/5.2/ref/settings/#databases
        
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
        
        
        # Password validation
        # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
        
        AUTH_PASSWORD_VALIDATORS = [
            {
                'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
            },
        ]
        
        
        # Internationalization
        # https://docs.djangoproject.com/en/5.2/topics/i18n/
        
        LANGUAGE_CODE = 'ru-ru'
        TIME_ZONE = 'Europe/Samara'
        USE_I18N = True
        USE_TZ = True
        
        
        STATIC_URL = '/static/'
        STATICFILES_DIRS = [BASE_DIR / "static"]
        STATIC_ROOT = BASE_DIR / "staticfiles"
        
        MEDIA_URL = '/media/'
        MEDIA_ROOT = BASE_DIR / 'media'
        
        CRISPY_TEMPLATE_PACK = 'bootstrap4'
        
        DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
        --- –ö–û–ù–ï–¶ ---

    üìÑ urls.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.contrib import admin
        from django.urls import path, include
        from django.conf import settings
        from django.conf.urls.static import static
        
        urlpatterns = [
            path('admin/', admin.site.urls),
            path('', include('core.urls')),
            path('courses/', include('courses.urls')),
            path('search/', include('search.urls')),
        ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
        --- –ö–û–ù–ï–¶ ---

    üìÑ wsgi.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        """
        WSGI config for cyberforum project.
        
        It exposes the WSGI callable as a module-level variable named ``application``.
        
        For more information on this file, see
        https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
        """
        
        import os
        
        from django.core.wsgi import get_wsgi_application
        
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cyberforum.settings')
        
        application = get_wsgi_application()
        --- –ö–û–ù–ï–¶ ---

  üìÑ db.sqlite3 (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
  üìÅ faiss_index/
    üìÑ index.faiss (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ index.pkl (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
  üìÑ manage.py
      --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
      #!/usr/bin/env python
      """Django's command-line utility for administrative tasks."""
      import os
      import sys
      
      
      def main():
          """Run administrative tasks."""
          os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cyberforum.settings')
          try:
              from django.core.management import execute_from_command_line
          except ImportError as exc:
              raise ImportError(
                  "Couldn't import Django. Are you sure it's installed and "
                  "available on your PYTHONPATH environment variable? Did you "
                  "forget to activate a virtual environment?"
              ) from exc
          execute_from_command_line(sys.argv)
      
      
      if __name__ == '__main__':
          main()
      --- –ö–û–ù–ï–¶ ---

  üìÅ search/
    üìÑ __init__.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        --- –ö–û–ù–ï–¶ ---

    üìÅ __pycache__/
      üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ admin.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ apps.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ models.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ urls.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ views.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ admin.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.contrib import admin
        
        # Register your models here.
        --- –ö–û–ù–ï–¶ ---

    üìÑ apps.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.apps import AppConfig
        
        
        class SearchConfig(AppConfig):
            default_auto_field = 'django.db.models.BigAutoField'
            name = 'search'
        --- –ö–û–ù–ï–¶ ---

    üìÅ migrations/
      üìÑ __init__.py
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          --- –ö–û–ù–ï–¶ ---

      üìÅ __pycache__/
        üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
    üìÑ models.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.db import models
        
        # Create your models here.
        --- –ö–û–ù–ï–¶ ---

    üìÑ tests.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.test import TestCase
        
        # Create your tests here.
        --- –ö–û–ù–ï–¶ ---

    üìÑ urls.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.urls import path
        from . import views
        
        app_name = 'search'
        
        urlpatterns = [
            path('', views.search_view, name='results'),
        ]
        --- –ö–û–ù–ï–¶ ---

    üìÑ views.py
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        from django.shortcuts import render
        from courses.models import Course
        from core.models import Contact, Event
        
        def search_view(request):
            query = request.GET.get('q', '').strip()
            audience = request.GET.get('audience', '')
            format_type = request.GET.get('format', '')
        
            courses = Course.objects.all()
            contacts = Contact.objects.all()
            events = Event.objects.all()
        
            if query:
                courses = courses.filter(title__icontains=query) | courses.filter(description__icontains=query)
                contacts = contacts.filter(name__icontains=query) | contacts.filter(address__icontains=query)
                events = events.filter(title__icontains=query) | events.filter(description__icontains=query)
        
            if audience:
                courses = courses.filter(audience=audience)
                contacts = contacts.filter(audience=audience)
                events = events.filter(audience=audience)
        
            if format_type:
                courses = courses.filter(format_type=format_type)
        
            context = {
                'query': query,
                'courses': courses,
                'contacts': contacts,
                'events': events,
                'audience_filter': audience,
                'format_filter': format_type,
            }
            return render(request, 'search/results.html', context)
        --- –ö–û–ù–ï–¶ ---

  üìÅ static/
    üìÅ css/
      üìÑ style.css
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          body {
              font-size: 1rem;
              line-height: 1.6;
          }
          
          .card {
              box-shadow: 0 2px 8px rgba(0,0,0,0.1);
              transition: transform 0.2s;
          }
          
          .card:hover {
              transform: translateY(-3px);
          }
          
          footer {
              font-size: 0.9rem;
          }
          --- –ö–û–ù–ï–¶ ---

  üìÅ templates/
    üìÑ base.html
        --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
        {% load static %}
        <!DOCTYPE html>
        <html lang="ru">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å –£–¥–º—É—Ä—Ç–∏–∏</title>
            <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
            <link href="{% static 'css/style.css' %}" rel="stylesheet">
        </head>
        <body>
            <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
                <div class="container">
                    <a class="navbar-brand" href="{% url 'core:home' %}">–§–∏–Ω–ì—Ä–∞–º–æ—Ç–∞ –£–¥–º—É—Ä—Ç–∏–∏</a>
                    <div class="navbar-nav ms-auto">
                        <a class="nav-link" href="{% url 'core:home' %}">–ì–ª–∞–≤–Ω–∞—è</a>
                        <a class="nav-link" href="{% url 'courses:list' %}">–ö—É—Ä—Å—ã</a>
                        <a class="nav-link" href="{% url 'core:contacts' %}">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
                        <a class="nav-link" href="{% url 'core:events' %}">–°–æ–±—ã—Ç–∏—è</a>
                        <form class="d-flex ms-3" action="{% url 'search:results' %}" method="get">
                            <input class="form-control me-2" type="search" name="q" placeholder="–ü–æ–∏—Å–∫..." aria-label="–ü–æ–∏—Å–∫">
                            <button class="btn btn-outline-light" type="submit">–ù–∞–π—Ç–∏</button>
                        </form>
                    </div>
                </div>
            </nav>
        
            <div class="container mt-4">
                {% block content %}{% endblock %}
            </div>
        
            <div id="chatbot-widget" style="position: fixed; bottom: 20px; right: 20px; z-index: 9999; width: 320px; height: 450px; display: flex; flex-direction: column; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; box-shadow: 0 4px 15px rgba(0,0,0,0.1); border-radius: 16px; background-color: white; overflow: hidden;">
        
            <div style="background-color: #d4c8b7; color: #5a6b4d; padding: 12px; font-weight: bold; display: flex; align-items: center; justify-content: space-between;">
                üí∞üíº –ì–µ–Ω–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤
                <button onclick="toggleChat()" style="background: none; border: none; color: #333; cursor: pointer; font-size: 16px;">√ó</button>
            </div>
        
            <div id="chat-messages" style="flex-grow: 1; padding: 12px; overflow-y: auto; background-color: #f8f6f0; max-height: 320px;"></div>
        
            <div style="display: flex; padding: 10px; border-top: 1px solid #e0e0e0;">
                <input type="text" id="chat-input" placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å"
                       style="flex-grow: 1; padding: 8px; border: 1px solid #ccc; border-radius: 20px; outline: none;"
                       onkeydown="if(event.key==='Enter') sendQuestion()">
                <button onclick="sendQuestion()"
                        style="margin-left: 8px; padding: 8px 16px; background-color: #6a7d5d; color: white; border: none; border-radius: 20px; cursor: pointer; font-size: 14px;">
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                </button>
            </div>
        </div>
        
        <div id="chat-open-btn" style="position: fixed; bottom: 20px; right: 20px; z-index: 9998; width: 50px; height: 50px; border-radius: 50%; background-color: #6a7d5d; color: white; display: flex; align-items: center; justify-content: center; font-size: 24px; box-shadow: 0 4px 10px rgba(0,0,0,0.1); cursor: pointer; display: none;">üí¨</div>
        
        <script>
            function toggleChat() {
            const widget = document.getElementById('chatbot-widget');
            const openBtn = document.getElementById('chat-open-btn');
        
            if (widget.style.display === 'none' || !widget.style.display) {
                widget.style.display = 'flex';
                openBtn.style.display = 'none';
                // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
                sendGreeting();
            } else {
                widget.style.display = 'none';
                openBtn.style.display = 'flex';
            }
        }
        
            // ‚úÖ –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            let greetingSent = false;
        
        // ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
            function sendGreeting() {
                if (greetingSent) return; // –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
        
                const messageArea = document.getElementById('chat-messages');
        
                const greeting = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ü–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ–º–æ–≥—É!";
        
                appendMessage(greeting, 'bot');
        
                greetingSent = true; // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        }
        
            window.onload = function() {
                // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ‚Äî —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? –ù–µ—Ç ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                document.getElementById('chatbot-widget').style.display = 'none';
                document.getElementById('chat-open-btn').style.display = 'flex';
            };
        
            async function sendQuestion() {
                const input = document.getElementById('chat-input');
                const messageArea = document.getElementById('chat-messages');
                const question = input.value.trim();
        
                if (!question) return;
        
                appendMessage(question, 'user');
                input.value = '';
        
                appendMessage("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...", 'bot');
        
                try {
                    const response = await fetch('/chat-ask/', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRFToken': getCookie('csrftoken')
                        },
                        body: JSON.stringify({ question: question })
                    });
        
                    const data = await response.json();
        
                    const lastMsg = messageArea.lastElementChild;
                    if (lastMsg && lastMsg.classList.contains('bot')) {
                        messageArea.removeChild(lastMsg);
                    }
        
                    if (data.error) {
                        appendMessage(`‚ùå ${data.error}`, 'bot');
                    } else {
                        appendMessage(data.answer, 'bot');
                    }
        
                } catch (error) {
                    const lastMsg = messageArea.lastElementChild;
                    if (lastMsg && lastMsg.classList.contains('bot')) {
                        messageArea.removeChild(lastMsg);
                    }
                    appendMessage("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.", 'bot');
                }
            }
        
            function appendMessage(text, sender) {
                const messageArea = document.getElementById('chat-messages');
                const msgDiv = document.createElement('div');
                msgDiv.style.marginBottom = '12px';
                msgDiv.style.maxWidth = '80%';
                msgDiv.style.padding = '10px 14px';
                msgDiv.style.borderRadius = sender === 'user' ? '18px 18px 0 18px' : '18px 18px 18px 0';
                msgDiv.style.backgroundColor = sender === 'user' ? '#6a7d5d' : '#f0f0f0';
                msgDiv.style.color = sender === 'user' ? 'white' : '#333';
                msgDiv.style.wordWrap = 'break-word';
                msgDiv.style.fontSize = '14px';
                msgDiv.style.alignSelf = sender === 'user' ? 'flex-end' : 'flex-start';
                msgDiv.textContent = text;
                msgDiv.className = sender;
                messageArea.appendChild(msgDiv);
                messageArea.scrollTop = messageArea.scrollHeight;
            }
        
            function getCookie(name) {
                let cookieValue = null;
                if (document.cookie && document.cookie !== '') {
                    const cookies = document.cookie.split(';');
                    for (let i = 0; i < cookies.length; i++) {
                        const cookie = cookies[i].trim();
                        if (cookie.substring(0, name.length + 1) === (name + '=')) {
                            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                            break;
                        }
                    }
                }
                return cookieValue;
            }
        
            document.getElementById('chat-input').addEventListener('keydown', function(e) {
                if (e.key === 'Enter') sendQuestion();
            });
        
            // –§–∏–∫—Å: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç –∑–∞–∫—Ä—ã—Ç
            function updateChatButtonVisibility() {
                const widget = document.getElementById('chatbot-widget');
                const openBtn = document.getElementById('chat-open-btn');
        
                if (widget.style.display === 'none' || !widget.style.display) {
                    openBtn.style.display = 'flex';
                } else {
                    openBtn.style.display = 'none';
                }
            }
        
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–∫—Ä–æ–ª–ª–µ –∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏
            window.addEventListener('scroll', updateChatButtonVisibility);
            window.addEventListener('load', updateChatButtonVisibility);
        
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è
            document.getElementById('chat-open-btn').addEventListener('click', function() {
                toggleChat();
                // –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                updateChatButtonVisibility();
            });
        
            // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
            window.addEventListener('resize', updateChatButtonVisibility);
        
        </script>
        <style>
            #chatbot-widget {
                animation: slideIn 0.3s ease-out;
            }
            @keyframes slideIn {
                from { transform: translateX(300px); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
        </style>
        
        
            <footer class="bg-light text-center py-3 mt-5">
                <p class="mb-0">¬© 2025 –ü–æ—Ä—Ç–∞–ª —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –£–¥–º—É—Ä—Ç–∏–∏</p>
            </footer>
        
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
        </body>
        </html>
        --- –ö–û–ù–ï–¶ ---

    üìÅ core/
      üìÑ contacts.html
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          {% extends 'base.html' %}
          
          {% block content %}
          <h1>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h1>
          <div class="row">
              {% for contact in contacts %}
                  <div class="col-md-6 mb-4">
                      <div class="card">
                          <div class="card-body">
                              <h5 class="card-title">{{ contact.name }}</h5>
                              <p><strong>–ê–¥—Ä–µ—Å:</strong> {{ contact.address }}</p>
                              <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {{ contact.phone }}</p>
                              {% if contact.email %}
                                  <p><strong>Email:</strong> {{ contact.email }}</p>
                              {% endif %}
                              <p class="text-muted">–ê—É–¥–∏—Ç–æ—Ä–∏—è: {{ contact.audience }}</p>
                          </div>
                      </div>
                  </div>
              {% endfor %}
          </div>
          {% endblock %}
          --- –ö–û–ù–ï–¶ ---

      üìÑ events.html
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          {% extends 'base.html' %}
          
          {% block content %}
          <h1>–°–æ–±—ã—Ç–∏—è</h1>
          <div class="row">
              {% for event in events %}
                  <div class="col-md-6 mb-4">
                      <div class="card">
                          <div class="card-body">
                              <h5 class="card-title">{{ event.title }}</h5>
                              <p><strong>–î–∞—Ç–∞:</strong> {{ event.date|date:"d.m.Y" }}</p>
                              <p><strong>–ú–µ—Å—Ç–æ:</strong> {{ event.location }}</p>
                              <p>{{ event.description|truncatewords:20 }}</p>
                              <p class="text-muted">–î–ª—è: {{ event.audience }}</p>
                          </div>
                      </div>
                  </div>
              {% empty %}
                  <p>–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
              {% endfor %}
          </div>
          {% endblock %}
          --- –ö–û–ù–ï–¶ ---

      üìÑ home.html
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          {% extends 'base.html' %}
          
          {% block content %}
          <h1 class="mb-4">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø–æ—Ä—Ç–∞–ª —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –£–¥–º—É—Ä—Ç–∏–∏!</h1>
          
          <div class="row mb-5">
              <div class="col-md-8">
                  <p>–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫—É—Ä—Å—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–∞—à–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏.</p>
                  <a href="{% url 'courses:list' %}" class="btn btn-primary">–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ</a>
              </div>
              <div class="col-md-4">
                  <div class="card">
                      <div class="card-body">
                          <h5 class="card-title">–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è</h5>
                          {% for event in events %}
                              <p class="card-text"><strong>{{ event.title }}</strong><br>{{ event.date|date:"d.m.Y" }} –≤ {{ event.location }}</p>
                          {% empty %}
                              <p>–°–æ–±—ã—Ç–∏—è –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.</p>
                          {% endfor %}
                      </div>
                  </div>
              </div>
          </div>
          
          <h3>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ä—Å—ã</h3>
          <div class="row">
              {% for course in courses %}
                  <div class="col-md-4 mb-4">
                      <div class="card h-100">
                          <div class="card-body">
                              <h5 class="card-title">{{ course.title }}</h5>
                              <p class="card-text">{{ course.description|truncatewords:15 }}</p>
                              <a href="{% url 'courses:detail' course.id %}" class="btn btn-outline-primary">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                          </div>
                      </div>
                  </div>
              {% endfor %}
          </div>
          {% endblock %}
          --- –ö–û–ù–ï–¶ ---

    üìÅ courses/
      üìÑ detail.html
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          {% extends 'base.html' %}
          
          {% block content %}
          <h1>{{ course.title }}</h1>
          <p>{{ course.description }}</p>
          
          <h3>–£—Ä–æ–∫–∏</h3>
          <div class="list-group">
              {% for lesson in course.lessons.all %}
                  <a href="{% url 'courses:lesson' lesson.id %}" class="list-group-item list-group-item-action">
                      {{ lesson.title }}
                  </a>
              {% empty %}
                  <p>–£—Ä–æ–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.</p>
              {% endfor %}
          </div>
          {% endblock %}
          --- –ö–û–ù–ï–¶ ---

      üìÑ lesson.html
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          {% extends 'base.html' %}
          
          {% block content %}
          <h1>{{ lesson.title }}</h1>
          <div class="mb-4">{{ lesson.content|safe }}</div>
          
          {% if lesson.video_url %}
          <div class="ratio ratio-16x9 mb-4">
              <iframe src="{{ lesson.video_url }}" title="–í–∏–¥–µ–æ—É—Ä–æ–∫">
              </iframe>
          </div>
          {% endif %}
          
          {% if lesson.questions.exists %}
          <h3>–¢–µ—Å—Ç</h3>
          <form method="post" action="{% url 'courses:test' lesson.id %}">
              {% csrf_token %}
              {% for q in questions %}
              <div class="card mb-3">
                  <div class="card-body">
                      <p><strong>{{ forloop.counter }}. {{ q.text }}</strong></p>
                      <div class="form-check">
                          <input class="form-check-input" type="radio" name="q{{ q.id }}" value="A" id="q{{ q.id }}a" required>
                          <label class="form-check-label" for="q{{ q.id }}a">{{ q.option_a }}</label>
                      </div>
                      <div class="form-check">
                          <input class="form-check-input" type="radio" name="q{{ q.id }}" value="B" id="q{{ q.id }}b">
                          <label class="form-check-label" for="q{{ q.id }}b">{{ q.option_b }}</label>
                      </div>
                      {% if q.option_c %}
                      <div class="form-check">
                          <input class="form-check-input" type="radio" name="q{{ q.id }}" value="C" id="q{{ q.id }}c">
                          <label class="form-check-label" for="q{{ q.id }}c">{{ q.option_c }}</label>
                      </div>
                      {% endif %}
                      {% if q.option_d %}
                      <div class="form-check">
                          <input class="form-check-input" type="radio" name="q{{ q.id }}" value="D" id="q{{ q.id }}d">
                          <label class="form-check-label" for="q{{ q.id }}d">{{ q.option_d }}</label>
                      </div>
                      {% endif %}
                  </div>
              </div>
              {% endfor %}
              <button type="submit" class="btn btn-success">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</button>
          </form>
          {% endif %}
          {% endblock %}
          --- –ö–û–ù–ï–¶ ---

      üìÑ list.html
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          {% extends 'base.html' %}
          
          {% block content %}
          <h1>–ö—É—Ä—Å—ã</h1>
          
          <form method="get" class="mb-4">
              <div class="row">
                  <div class="col-md-4">
                      <select name="audience" class="form-select">
                          <option value="">–í—Å–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏</option>
                          <option value="—à–∫–æ–ª—å–Ω–∏–∫" {% if request.GET.audience == '—à–∫–æ–ª—å–Ω–∏–∫' %}selected{% endif %}>–®–∫–æ–ª—å–Ω–∏–∫–∏</option>
                          <option value="–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä" {% if request.GET.audience == '–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä' %}selected{% endif %}>–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã</option>
                          <option value="–ú–°–ü" {% if request.GET.audience == '–ú–°–ü' %}selected{% endif %}>–ú–°–ü</option>
                      </select>
                  </div>
                  <div class="col-md-4">
                      <select name="format" class="form-select">
                          <option value="">–í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã</option>
                          <option value="—Ç–µ–∫—Å—Ç" {% if request.GET.format == '—Ç–µ–∫—Å—Ç' %}selected{% endif %}>–¢–µ–∫—Å—Ç</option>
                          <option value="–≤–∏–¥–µ–æ" {% if request.GET.format == '–≤–∏–¥–µ–æ' %}selected{% endif %}>–í–∏–¥–µ–æ</option>
                          <option value="—Ç–µ—Å—Ç" {% if request.GET.format == '—Ç–µ—Å—Ç' %}selected{% endif %}>–¢–µ—Å—Ç</option>
                      </select>
                  </div>
                  <div class="col-md-4">
                      <button type="submit" class="btn btn-primary w-100">–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>
                  </div>
              </div>
          </form>
          
          <div class="row">
              {% for course in courses %}
                  <div class="col-md-4 mb-4">
                      <div class="card">
                          <div class="card-body">
                              <h5 class="card-title">{{ course.title }}</h5>
                              <p class="text-muted">–î–ª—è: {{ course.audience }} | –§–æ—Ä–º–∞—Ç: {{ course.format_type }}</p>
                              <p>{{ course.description|truncatewords:10 }}</p>
                              <a href="{% url 'courses:detail' course.id %}" class="btn btn-primary">–û—Ç–∫—Ä—ã—Ç—å</a>
                          </div>
                      </div>
                  </div>
              {% empty %}
                  <p>–ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
              {% endfor %}
          </div>
          {% endblock %}
          --- –ö–û–ù–ï–¶ ---

      üìÑ result.html
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          {% extends 'base.html' %}
          
          {% block content %}
          <div class="text-center">
              <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞</h1>
              <div class="display-1 text-success">{{ score }} / {{ total }}</div>
              <p class="lead">–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <strong>{{ percent }}%</strong></p>
              <a href="{% url 'courses:lesson' lesson.id %}" class="btn btn-primary">–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —É—Ä–æ–∫</a>
              <a href="{% url 'courses:list' %}" class="btn btn-outline-secondary">–ö –∫—É—Ä—Å–∞–º</a>
          </div>
          {% endblock %}
          --- –ö–û–ù–ï–¶ ---

    üìÅ search/
      üìÑ results.html
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          {% extends 'base.html' %}
          
          {% block content %}
          <h1>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è: "{{ query }}"</h1>
          
          <h3>–ö—É—Ä—Å—ã</h3>
          <div class="row">
              {% for course in courses %}
                  <div class="col-md-4 mb-3">
                      <div class="card">
                          <div class="card-body">
                              <h5>{{ course.title }}</h5>
                              <p class="text-muted">{{ course.audience }} | {{ course.format_type }}</p>
                              <a href="{% url 'courses:detail' course.id %}" class="btn btn-sm btn-outline-primary">–û—Ç–∫—Ä—ã—Ç—å</a>
                          </div>
                      </div>
                  </div>
              {% empty %}
                  <p>–ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
              {% endfor %}
          </div>
          
          <h3>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h3>
          <div class="row">
              {% for contact in contacts %}
                  <div class="col-md-6 mb-3">
                      <div class="card">
                          <div class="card-body">
                              <h5>{{ contact.name }}</h5>
                              <p>{{ contact.address }}</p>
                              <p>{{ contact.phone }}</p>
                          </div>
                      </div>
                  </div>
              {% empty %}
                  <p>–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
              {% endfor %}
          </div>
          
          <h3>–°–æ–±—ã—Ç–∏—è</h3>
          <div class="row">
              {% for event in events %}
                  <div class="col-md-6 mb-3">
                      <div class="card">
                          <div class="card-body">
                              <h5>{{ event.title }}</h5>
                              <p>{{ event.date|date:"d.m.Y" }} ‚Äî {{ event.location }}</p>
                          </div>
                      </div>
                  </div>
              {% empty %}
                  <p>–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
              {% endfor %}
          </div>
          {% endblock %}
          --- –ö–û–ù–ï–¶ ---

üìÑ project_structure.txt
    --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
    === –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê:  ===
    –ü—É—Ç—å: C:\Users\ilagr\PycharmProjects\hackaton\cyberforum
    ============================================================
    
    üìÅ .git/
      üìÑ config (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ description (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ HEAD (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÅ hooks/
        üìÑ applypatch-msg.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ commit-msg.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ fsmonitor-watchman.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ post-update.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ pre-applypatch.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ pre-commit.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ pre-merge-commit.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ pre-push.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ pre-rebase.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ pre-receive.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ prepare-commit-msg.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ push-to-checkout.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ sendemail-validate.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ update.sample (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ index (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÅ info/
        üìÑ exclude (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÅ logs/
        üìÑ HEAD (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÅ refs/
          üìÅ heads/
            üìÑ main (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÅ remotes/
            üìÅ origin/
              üìÑ HEAD (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÅ objects/
        üìÅ info/
        üìÅ pack/
          üìÑ pack-94a7ee2f43268eff4999f8595bb8161f04755458.idx (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ pack-94a7ee2f43268eff4999f8595bb8161f04755458.pack (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ pack-94a7ee2f43268eff4999f8595bb8161f04755458.rev (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ packed-refs (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÅ refs/
        üìÅ heads/
          üìÑ main (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÅ remotes/
          üìÅ origin/
            üìÑ HEAD (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÅ tags/
    üìÅ .idea/
      üìÑ .gitignore
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          # Default ignored files
          /shelf/
          /workspace.xml
          --- –ö–û–ù–ï–¶ ---
    
    üìÅ cyberforum/
      üìÅ core/
        üìÑ __init__.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            --- –ö–û–ù–ï–¶ ---
    
        üìÅ __pycache__/
          üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ admin.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ apps.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ models.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ urls.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ views.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ admin.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.contrib import admin
            from .models import Contact, Event
            
            @admin.register(Contact)
            class ContactAdmin(admin.ModelAdmin):
                list_display = ['name', 'phone', 'email', 'audience']
                search_fields = ['name', 'address']
                list_filter = ['audience']
            
            @admin.register(Event)
            class EventAdmin(admin.ModelAdmin):
                list_display = ['title', 'date', 'location', 'audience']
                list_filter = ['audience', 'date']
                date_hierarchy = 'date'
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ apps.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.apps import AppConfig
            
            
            class CoreConfig(AppConfig):
                default_auto_field = 'django.db.models.BigAutoField'
                name = 'core'
            --- –ö–û–ù–ï–¶ ---
    
        üìÅ llm_assistant/
          üìÑ __init__.py
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              --- –ö–û–ù–ï–¶ ---
    
          üìÅ __pycache__/
            üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
            üìÑ indexer.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
            üìÑ loader.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
            üìÑ model.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
            üìÑ rag.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
            üìÑ utils.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÅ docs/
            üìÑ Keys_Web-razrabotka.pdf (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ indexer.py
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              import os
              from pathlib import Path
              
              from langchain_community.vectorstores import FAISS
              from langchain_community.embeddings import HuggingFaceEmbeddings
              from langchain_text_splitters import RecursiveCharacterTextSplitter
              from .loader import load_documents_from_folder
              from .utils import clean_text, count_tokens
              
              INDEX_DIR = "faiss_index"
              
              CURRENT_DIR = Path(__file__).parent
              DOCS_DIR = CURRENT_DIR / "docs"
              
              def create_or_load_vectorstore():
                  """
                  –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É.
                  –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Django.
                  """
                  embedding_model = HuggingFaceEmbeddings(
                      model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
                  )
              
                  if os.path.exists(INDEX_DIR):
                      print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...")
                      vectorstore = FAISS.load_local(
                          INDEX_DIR,
                          embedding_model,
                          allow_dangerous_deserialization=True
                      )
                      print("‚úÖ –ò–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω.")
                  else:
                      print("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...")
                      documents = load_documents_from_folder(DOCS_DIR)
                      if not documents:
                          raise RuntimeError("–ù–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏!")
              
                      splitter = RecursiveCharacterTextSplitter(
                          chunk_size=500,
                          chunk_overlap=100,
                          length_function=count_tokens,
                          separators=["\n\n", "\n", ". ", "! ", "? ", " ", ""],
                      )
              
                      chunks = splitter.split_documents(documents)
                      for chunk in chunks:
                          chunk.page_content = clean_text(chunk.page_content)
              
                      vectorstore = FAISS.from_documents(chunks, embedding_model)
                      vectorstore.save_local(INDEX_DIR)
                      print(f"‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {INDEX_DIR}/")
              
                  return vectorstore
              --- –ö–û–ù–ï–¶ ---
    
          üìÑ loader.py
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              from pathlib import Path
              from typing import List
              from langchain_community.document_loaders import (
                  TextLoader,
                  PyMuPDFLoader,
                  Docx2txtLoader,
              )
              
              SUPPORTED_EXTENSIONS = {".txt", ".pdf", ".docx"}
              
              def load_documents_from_folder(folder_path: str) -> List:
                  documents = []
                  folder = Path(folder_path)
                  if not folder.exists():
                      raise FileNotFoundError(f"–ü–∞–ø–∫–∞ {folder_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
              
                  for file_path in folder.iterdir():
                      if file_path.is_file() and file_path.suffix.lower() in SUPPORTED_EXTENSIONS:
                          print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é: {file_path.name}")
                          if file_path.suffix.lower() == ".txt":
                              loader = TextLoader(file_path, encoding="utf-8")
                          elif file_path.suffix.lower() == ".pdf":
                              loader = PyMuPDFLoader(file_path)
                          elif file_path.suffix.lower() == ".docx":
                              loader = Docx2txtLoader(file_path)
                          else:
                              continue
              
                          docs = loader.load()
                          for doc in docs:
                              doc.metadata["source"] = file_path.name
                              doc.metadata["file_type"] = file_path.suffix.lower()[1:]
                          documents.extend(docs)
              
                  if not documents:
                      print("‚ö†Ô∏è  –í –ø–∞–ø–∫–µ docs –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ (.txt, .pdf, .docx)")
                  else:
                      print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")
              
                  return documents
              --- –ö–û–ù–ï–¶ ---
    
          üìÑ model.py
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              import os
              from langchain_gigachat.chat_models import GigaChat
              
              # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á –≤ .env –∏–ª–∏ –∑–¥–µ—Å—å (–ª—É—á—à–µ —á–µ—Ä–µ–∑ .env)
              os.environ["GIGACHAT_CREDENTIALS"] = "NGRiZjA5MmMtYmJkOS00NzkzLWJlZGQtM2UzYWFlZTNiNWMwOjlmMjQ0MjU5LWUxM2YtNGUyYy1iYTg1LWFlOTlhZDhjMWUzOQ=="
              
              llm = GigaChat(
                  model="GigaChat-Pro",
                  verify_ssl_certs=False,
                  timeout=60
              )
              --- –ö–û–ù–ï–¶ ---
    
          üìÑ rag.py
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              from .model import llm
              from .indexer import create_or_load_vectorstore
              from langchain_core.prompts import ChatPromptTemplate
              from langchain_core.output_parsers import StrOutputParser
              
              # –ü—Ä–æ–º–ø—Ç ‚Äî –ª—É—á—à–µ –≤—ã–Ω–µ—Å—Ç–∏ —Å—é–¥–∞, —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –º–µ–Ω—è—Ç—å
              PROMPT_TEMPLATE = """
              –í—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
              –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–∫–∞–∂–∏—Ç–µ: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞".
              (–£—á—Ç–∏, —á—Ç–æ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –Ω–∞ html —Å—Ç—Ä–∞–Ω–∏—Ü–µ, —Ç–æ –µ—Å—Ç—å –Ω–∞–ø—Ä–∏–º–µ—Ä 
              –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ** –∏ html-—Ç—ç–≥–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∂–∏—Ä–Ω—ã–º –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è. –õ—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç 
              –±–µ–∑ –≤—ã–¥–µ–ª–µ–Ω–∏–π, —á–µ–º —Å –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏)
              –ö–æ–Ω—Ç–µ–∫—Å—Ç:
              {context}
              
              –í–æ–ø—Ä–æ—Å:
              {question}
              
              –û—Ç–≤–µ—Ç:
              """
              
              prompt = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)
              chain = prompt | llm | StrOutputParser()
              
              def generate_answer(question: str, top_k: int = 3) -> str:
                  """
                  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG.
                  –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ Django view.
                  """
                  # –ò–Ω–¥–µ–∫—Å —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
                  # –ú—ã –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –µ–≥–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑!
                  vectorstore = create_or_load_vectorstore()
              
                  relevant_docs = vectorstore.similarity_search(question, k=top_k)
              
                  context = "\n\n".join([
                      f"–ò—Å—Ç–æ—á–Ω–∏–∫: {doc.metadata['source']} (—Ç–∏–ø: {doc.metadata['file_type']})\n{doc.page_content}"
                      for doc in relevant_docs
                  ])
              
                  response = chain.invoke({
                      "context": context,
                      "question": question
                  })
              
                  return response
              --- –ö–û–ù–ï–¶ ---
    
          üìÑ utils.py
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              import re
              from bs4 import BeautifulSoup
              
              def clean_text(text: str) -> str:
                  soup = BeautifulSoup(text, "html.parser")
                  text = soup.get_text()
                  text = re.sub(r'\s+', ' ', text)
                  text = re.sub(r'[\u200b-\u200d\uFEFF]', '', text)
                  text = re.sub(r'—Å—Ç—Ä–∞–Ω–∏—Ü[–∞-—ã]?\s*\d+\s*–∏–∑\s*\d+', '', text, flags=re.IGNORECASE)
                  text = re.sub(r'http\S+|www\S+|https\S+', '', text, flags=re.MULTILINE)
                  text = re.sub(r'[^\w\s.,!?;:()\-\‚Äì‚Äî\"\'\n]', ' ', text)
                  return text.strip()
              
              # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É, —á—Ç–æ –∏ —É GigaChat (GPT-4)
              try:
                  import tiktoken
                  encoder = tiktoken.encoding_for_model("gpt-4")
              except ImportError:
                  encoder = None
              
              def count_tokens(text: str) -> int:
                  if encoder is None:
                      return len(text.split()) * 1.3  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ
                  return len(encoder.encode(text))
              --- –ö–û–ù–ï–¶ ---
    
        üìÅ management/
          üìÅ commands/
            üìÑ initdata.py
                --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
                from django.core.management.base import BaseCommand
                from core.models import Contact, Event
                from courses.models import Course, Lesson, Question
                
                class Command(BaseCommand):
                    help = '–ó–∞–ø–æ–ª–Ω—è–µ—Ç –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏'
                
                    def handle(self, *args, **kwargs):
                        # –û—á–∏—Å—Ç–∫–∞
                        Contact.objects.all().delete()
                        Event.objects.all().delete()
                        Course.objects.all().delete()
                
                        # –ö–æ–Ω—Ç–∞–∫—Ç—ã
                        Contact.objects.create(
                            name="–¶–µ–Ω—Ç—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –ò–∂–µ–≤—Å–∫",
                            address="—É–ª. –ü—É—à–∫–∏–Ω—Å–∫–∞—è, 100",
                            phone="+7 (3412) 12-34-56",
                            audience="–≤—Å–µ"
                        )
                
                        # –°–æ–±—ã—Ç–∏—è
                        from datetime import date
                        Event.objects.create(
                            title="–î–µ–Ω—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –≤ —à–∫–æ–ª–µ ‚Ññ1",
                            description="–û—Ç–∫—Ä—ã—Ç—ã–π —É—Ä–æ–∫ –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ 8-11 –∫–ª–∞—Å—Å–æ–≤",
                            date=date(2025, 4, 20),
                            location="–®–∫–æ–ª–∞ ‚Ññ1, –ò–∂–µ–≤—Å–∫",
                            audience="—à–∫–æ–ª—å–Ω–∏–∫"
                        )
                
                        # –ö—É—Ä—Å—ã
                        course1 = Course.objects.create(
                            title="–°–µ–º–µ–π–Ω—ã–π –±—é–¥–∂–µ—Ç",
                            description="–ù–∞—É—á–∏—Ç–µ—Å—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã —Å–µ–º—å–∏.",
                            audience="–≤—Å–µ",
                            format_type="—Ç–µ–∫—Å—Ç"
                        )
                        lesson1 = Lesson.objects.create(
                            course=course1,
                            title="–ö–∞–∫ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –±—é–¥–∂–µ—Ç",
                            content="<p>–®–∞–≥ 1: –£—á–µ—Ç –≤—Å–µ—Ö –¥–æ—Ö–æ–¥–æ–≤...</p>",
                            video_url="https://www.youtube.com/embed/dQw4w9WgXcQ",
                            order=1
                        )
                        Question.objects.create(
                            lesson=lesson1,
                            text="–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã?",
                            option_a="–ê—Ä–µ–Ω–¥–∞ –∂–∏–ª—å—è",
                            option_b="–ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                            option_c="–û—Ç–ø—É—Å–∫",
                            correct_answer="A"
                        )
                
                        self.stdout.write(self.style.SUCCESS('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!'))
                --- –ö–û–ù–ï–¶ ---
    
        üìÅ migrations/
          üìÑ 0001_initial.py
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              # Generated by Django 5.2.6 on 2025-09-21 14:04
              
              from django.db import migrations, models
              
              
              class Migration(migrations.Migration):
              
                  initial = True
              
                  dependencies = [
                  ]
              
                  operations = [
                      migrations.CreateModel(
                          name='Contact',
                          fields=[
                              ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                              ('name', models.CharField(max_length=200)),
                              ('address', models.TextField()),
                              ('phone', models.CharField(max_length=50)),
                              ('email', models.EmailField(blank=True, max_length=254)),
                              ('audience', models.CharField(max_length=50)),
                          ],
                      ),
                      migrations.CreateModel(
                          name='Event',
                          fields=[
                              ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                              ('title', models.CharField(max_length=200)),
                              ('description', models.TextField()),
                              ('date', models.DateField()),
                              ('location', models.CharField(max_length=200)),
                              ('audience', models.CharField(max_length=50)),
                          ],
                      ),
                  ]
              --- –ö–û–ù–ï–¶ ---
    
          üìÑ __init__.py
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              --- –ö–û–ù–ï–¶ ---
    
          üìÅ __pycache__/
            üìÑ 0001_initial.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
            üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ models.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.db import models
            
            class Contact(models.Model):
                name = models.CharField(max_length=200)
                address = models.TextField()
                phone = models.CharField(max_length=50)
                email = models.EmailField(blank=True)
                audience = models.CharField(max_length=50)  # –≤—Å–µ, —à–∫–æ–ª—å–Ω–∏–∫–∏, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã
            
                def __str__(self):
                    return self.name
            
            class Event(models.Model):
                title = models.CharField(max_length=200)
                description = models.TextField()
                date = models.DateField()
                location = models.CharField(max_length=200)
                audience = models.CharField(max_length=50)
            
                def __str__(self):
                    return self.title
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ tests.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.test import TestCase
            
            # Create your tests here.
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ urls.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.urls import path
            from . import views
            
            app_name = 'core'
            
            urlpatterns = [
                path('', views.home_view, name='home'),
                path('contacts/', views.contacts_view, name='contacts'),
                path('events/', views.events_view, name='events'),
                path('chat-ask/', views.chat_ask, name='chat_ask'),
            ]
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ views.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            import json
            
            from django.http import JsonResponse
            from django.shortcuts import render
            from django.views.decorators.csrf import csrf_exempt
            
            from .llm_assistant.rag import generate_answer
            from .models import Contact, Event
            from courses.models import Course
            
            
            
            def home_view(request):
                courses = Course.objects.all()[:6]
                upcoming_events = Event.objects.order_by('date')[:3]
                return render(request, 'core/home.html', {
                    'courses': courses,
                    'events': upcoming_events,
                })
            
            
            def contacts_view(request):
                contacts = Contact.objects.all()
                return render(request, 'core/contacts.html', {'contacts': contacts})
            
            
            def events_view(request):
                events = Event.objects.order_by('date')
                return render(request, 'core/events.html', {'events': events})
            
            
            @csrf_exempt
            def chat_ask(request):
                if request.method != 'POST':
                    return JsonResponse({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'}, status=405)
            
                try:
                    data = json.loads(request.body)
                    question = data.get('question', '').strip()
            
                    if not question:
                        return JsonResponse({'error': '–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'}, status=400)
            
                    answer = generate_answer(question)
            
                    return JsonResponse({'answer': answer})
            
                except Exception as e:
                    return JsonResponse({'error': f'–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}'}, status=500)
            --- –ö–û–ù–ï–¶ ---
    
      üìÅ courses/
        üìÑ __init__.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            --- –ö–û–ù–ï–¶ ---
    
        üìÅ __pycache__/
          üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ admin.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ apps.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ models.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ urls.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ views.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ admin.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.contrib import admin
            from .models import Course, Lesson, Question
            
            class LessonInline(admin.TabularInline):
                model = Lesson
                extra = 1
            
            class QuestionInline(admin.TabularInline):
                model = Question
                extra = 1
            
            @admin.register(Course)
            class CourseAdmin(admin.ModelAdmin):
                list_display = ['title', 'audience', 'format_type', 'created_at']
                list_filter = ['audience', 'format_type']
                search_fields = ['title', 'description']
                inlines = [LessonInline]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Ä–æ–∫–∏ –ø—Ä—è–º–æ –≤–Ω—É—Ç—Ä–∏ –∫—É—Ä—Å–∞
            
            @admin.register(Lesson)
            class LessonAdmin(admin.ModelAdmin):
                list_display = ['title', 'course', 'order']
                list_filter = ['course']
                search_fields = ['title', 'content']
                inlines = [QuestionInline]  # –í–æ–ø—Ä–æ—Å—ã –≤–Ω—É—Ç—Ä–∏ —É—Ä–æ–∫–∞
            
            @admin.register(Question)
            class QuestionAdmin(admin.ModelAdmin):
                list_display = ['text', 'lesson', 'correct_answer']
                list_filter = ['lesson__course']
                search_fields = ['text']
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ apps.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.apps import AppConfig
            
            
            class CoursesConfig(AppConfig):
                default_auto_field = 'django.db.models.BigAutoField'
                name = 'courses'
            --- –ö–û–ù–ï–¶ ---
    
        üìÅ migrations/
          üìÑ 0001_initial.py
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              # Generated by Django 5.2.6 on 2025-09-21 14:04
              
              import django.db.models.deletion
              from django.db import migrations, models
              
              
              class Migration(migrations.Migration):
              
                  initial = True
              
                  dependencies = [
                  ]
              
                  operations = [
                      migrations.CreateModel(
                          name='Course',
                          fields=[
                              ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                              ('title', models.CharField(max_length=200)),
                              ('description', models.TextField()),
                              ('audience', models.CharField(max_length=50)),
                              ('format_type', models.CharField(max_length=50)),
                              ('created_at', models.DateTimeField(auto_now_add=True)),
                          ],
                      ),
                      migrations.CreateModel(
                          name='Lesson',
                          fields=[
                              ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                              ('title', models.CharField(max_length=200)),
                              ('content', models.TextField()),
                              ('video_url', models.URLField(blank=True, null=True)),
                              ('order', models.IntegerField(default=1)),
                              ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='courses.course')),
                          ],
                      ),
                      migrations.CreateModel(
                          name='Question',
                          fields=[
                              ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                              ('text', models.CharField(max_length=300)),
                              ('option_a', models.CharField(max_length=200)),
                              ('option_b', models.CharField(max_length=200)),
                              ('option_c', models.CharField(blank=True, max_length=200)),
                              ('option_d', models.CharField(blank=True, max_length=200)),
                              ('correct_answer', models.CharField(max_length=1)),
                              ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='courses.lesson')),
                          ],
                      ),
                  ]
              --- –ö–û–ù–ï–¶ ---
    
          üìÑ __init__.py
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              --- –ö–û–ù–ï–¶ ---
    
          üìÅ __pycache__/
            üìÑ 0001_initial.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
            üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ models.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.db import models
            
            class Course(models.Model):
                title = models.CharField(max_length=200)
                description = models.TextField()
                audience = models.CharField(max_length=50)  # —à–∫–æ–ª—å–Ω–∏–∫, –ø–µ–Ω—Å–∏–æ–Ω–µ—Ä, –ú–°–ü
                format_type = models.CharField(max_length=50)  # —Ç–µ–∫—Å—Ç, –≤–∏–¥–µ–æ, —Ç–µ—Å—Ç
                created_at = models.DateTimeField(auto_now_add=True)
            
                def __str__(self):
                    return self.title
            
            class Lesson(models.Model):
                course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='lessons')
                title = models.CharField(max_length=200)
                content = models.TextField()
                video_url = models.URLField(blank=True, null=True)  # YouTube
                order = models.IntegerField(default=1)
            
                def __str__(self):
                    return f"{self.course.title} - {self.title}"
            
            class Question(models.Model):
                lesson = models.ForeignKey(Lesson, on_delete=models.CASCADE, related_name='questions')
                text = models.CharField(max_length=300)
                option_a = models.CharField(max_length=200)
                option_b = models.CharField(max_length=200)
                option_c = models.CharField(max_length=200, blank=True)
                option_d = models.CharField(max_length=200, blank=True)
                correct_answer = models.CharField(max_length=1)  # A, B, C, D
            
                def __str__(self):
                    return self.text
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ tests.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.test import TestCase
            
            # Create your tests here.
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ urls.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.urls import path
            from . import views
            
            app_name = 'courses'
            
            urlpatterns = [
                path('', views.course_list_view, name='list'),
                path('<int:course_id>/', views.course_detail_view, name='detail'),
                path('lesson/<int:lesson_id>/', views.lesson_view, name='lesson'),
                path('lesson/<int:lesson_id>/test/', views.submit_test_view, name='test'),
            ]
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ views.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.shortcuts import render, get_object_or_404, redirect
            from .models import Course, Lesson, Question
            
            def course_list_view(request):
                courses = Course.objects.all()
                return render(request, 'courses/list.html', {'courses': courses})
            
            def course_detail_view(request, course_id):
                course = get_object_or_404(Course, id=course_id)
                return render(request, 'courses/detail.html', {'course': course})
            
            def lesson_view(request, lesson_id):
                lesson = get_object_or_404(Lesson, id=lesson_id)
                questions = lesson.questions.all()
                return render(request, 'courses/lesson.html', {
                    'lesson': lesson,
                    'questions': questions,
                })
            
            def submit_test_view(request, lesson_id):
                lesson = get_object_or_404(Lesson, id=lesson_id)
                questions = lesson.questions.all()
                total = questions.count()
                correct = 0
            
                if request.method == "POST":
                    for q in questions:
                        user_answer = request.POST.get(f'q{q.id}')
                        if user_answer == q.correct_answer:
                            correct += 1
            
                    score_percent = int((correct / total) * 100) if total > 0 else 0
                    return render(request, 'courses/result.html', {
                        'score': correct,
                        'total': total,
                        'percent': score_percent,
                        'lesson': lesson,
                    })
            
                return redirect('courses:lesson', lesson_id=lesson_id)
            --- –ö–û–ù–ï–¶ ---
    
      üìÅ cyberforum/
        üìÑ __init__.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            --- –ö–û–ù–ï–¶ ---
    
        üìÅ __pycache__/
          üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ settings.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ urls.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ wsgi.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ asgi.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            """
            ASGI config for cyberforum project.
            
            It exposes the ASGI callable as a module-level variable named ``application``.
            
            For more information on this file, see
            https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
            """
            
            import os
            
            from django.core.asgi import get_asgi_application
            
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cyberforum.settings')
            
            application = get_asgi_application()
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ settings.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            """
            Django settings for cyberforum project.
            
            Generated by 'django-admin startproject' using Django 5.2.6.
            
            For more information on this file, see
            https://docs.djangoproject.com/en/5.2/topics/settings/
            
            For the full list of settings and their values, see
            https://docs.djangoproject.com/en/5.2/ref/settings/
            """
            
            from pathlib import Path
            
            # Build paths inside the project like this: BASE_DIR / 'subdir'.
            BASE_DIR = Path(__file__).resolve().parent.parent
            
            
            # Quick-start development settings - unsuitable for production
            # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
            
            # SECURITY WARNING: keep the secret key used in production secret!
            SECRET_KEY = 'django-insecure-l#=@!evoxr(qh0c#lbm==+7=1q*^youjnqlb1h@$4)iz3bw@$r'
            
            # SECURITY WARNING: don't run with debug turned on in production!
            DEBUG = True
            
            ALLOWED_HOSTS = []
            
            
            # Application definition
            
            INSTALLED_APPS = [
                'django.contrib.admin',
                'django.contrib.auth',
                'django.contrib.contenttypes',
                'django.contrib.sessions',
                'django.contrib.messages',
                'django.contrib.staticfiles',
                'core',
                'courses',
                'search',
                'crispy_forms',
                'widget_tweaks',
            ]
            
            MIDDLEWARE = [
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
                'django.middleware.csrf.CsrfViewMiddleware',
                'django.contrib.auth.middleware.AuthenticationMiddleware',
                'django.contrib.messages.middleware.MessageMiddleware',
                'django.middleware.clickjacking.XFrameOptionsMiddleware',
            ]
            
            ROOT_URLCONF = 'cyberforum.urls'
            
            TEMPLATES = [
                {
                    'BACKEND': 'django.template.backends.django.DjangoTemplates',
                    'DIRS': ['templates'],
                    'APP_DIRS': True,
                    'OPTIONS': {
                        'context_processors': [
                            'django.template.context_processors.request',
                            'django.contrib.auth.context_processors.auth',
                            'django.contrib.messages.context_processors.messages',
                        ],
                    },
                },
            ]
            
            WSGI_APPLICATION = 'cyberforum.wsgi.application'
            
            
            # Database
            # https://docs.djangoproject.com/en/5.2/ref/settings/#databases
            
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.sqlite3',
                    'NAME': BASE_DIR / 'db.sqlite3',
                }
            }
            
            
            # Password validation
            # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
            
            AUTH_PASSWORD_VALIDATORS = [
                {
                    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
                },
                {
                    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
                },
                {
                    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
                },
                {
                    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
                },
            ]
            
            
            # Internationalization
            # https://docs.djangoproject.com/en/5.2/topics/i18n/
            
            LANGUAGE_CODE = 'ru-ru'
            TIME_ZONE = 'Europe/Samara'
            USE_I18N = True
            USE_TZ = True
            
            
            STATIC_URL = '/static/'
            STATICFILES_DIRS = [BASE_DIR / "static"]
            STATIC_ROOT = BASE_DIR / "staticfiles"
            
            MEDIA_URL = '/media/'
            MEDIA_ROOT = BASE_DIR / 'media'
            
            CRISPY_TEMPLATE_PACK = 'bootstrap4'
            
            DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ urls.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.contrib import admin
            from django.urls import path, include
            from django.conf import settings
            from django.conf.urls.static import static
            
            urlpatterns = [
                path('admin/', admin.site.urls),
                path('', include('core.urls')),
                path('courses/', include('courses.urls')),
                path('search/', include('search.urls')),
            ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ wsgi.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            """
            WSGI config for cyberforum project.
            
            It exposes the WSGI callable as a module-level variable named ``application``.
            
            For more information on this file, see
            https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
            """
            
            import os
            
            from django.core.wsgi import get_wsgi_application
            
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cyberforum.settings')
            
            application = get_wsgi_application()
            --- –ö–û–ù–ï–¶ ---
    
      üìÑ db.sqlite3 (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÅ faiss_index/
        üìÑ index.faiss (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ index.pkl (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
      üìÑ manage.py
          --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
          #!/usr/bin/env python
          """Django's command-line utility for administrative tasks."""
          import os
          import sys
          
          
          def main():
              """Run administrative tasks."""
              os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cyberforum.settings')
              try:
                  from django.core.management import execute_from_command_line
              except ImportError as exc:
                  raise ImportError(
                      "Couldn't import Django. Are you sure it's installed and "
                      "available on your PYTHONPATH environment variable? Did you "
                      "forget to activate a virtual environment?"
                  ) from exc
              execute_from_command_line(sys.argv)
          
          
          if __name__ == '__main__':
              main()
          --- –ö–û–ù–ï–¶ ---
    
      üìÅ search/
        üìÑ __init__.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            --- –ö–û–ù–ï–¶ ---
    
        üìÅ __pycache__/
          üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ admin.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ apps.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ models.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ urls.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
          üìÑ views.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ admin.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.contrib import admin
            
            # Register your models here.
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ apps.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.apps import AppConfig
            
            
            class SearchConfig(AppConfig):
                default_auto_field = 'django.db.models.BigAutoField'
                name = 'search'
            --- –ö–û–ù–ï–¶ ---
    
        üìÅ migrations/
          üìÑ __init__.py
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              --- –ö–û–ù–ï–¶ ---
    
          üìÅ __pycache__/
            üìÑ __init__.cpython-313.pyc (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)
        üìÑ models.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.db import models
            
            # Create your models here.
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ tests.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.test import TestCase
            
            # Create your tests here.
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ urls.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.urls import path
            from . import views
            
            app_name = 'search'
            
            urlpatterns = [
                path('', views.search_view, name='results'),
            ]
            --- –ö–û–ù–ï–¶ ---
    
        üìÑ views.py
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            from django.shortcuts import render
            from courses.models import Course
            from core.models import Contact, Event
            
            def search_view(request):
                query = request.GET.get('q', '').strip()
                audience = request.GET.get('audience', '')
                format_type = request.GET.get('format', '')
            
                courses = Course.objects.all()
                contacts = Contact.objects.all()
                events = Event.objects.all()
            
                if query:
                    courses = courses.filter(title__icontains=query) | courses.filter(description__icontains=query)
                    contacts = contacts.filter(name__icontains=query) | contacts.filter(address__icontains=query)
                    events = events.filter(title__icontains=query) | events.filter(description__icontains=query)
            
                if audience:
                    courses = courses.filter(audience=audience)
                    contacts = contacts.filter(audience=audience)
                    events = events.filter(audience=audience)
            
                if format_type:
                    courses = courses.filter(format_type=format_type)
            
                context = {
                    'query': query,
                    'courses': courses,
                    'contacts': contacts,
                    'events': events,
                    'audience_filter': audience,
                    'format_filter': format_type,
                }
                return render(request, 'search/results.html', context)
            --- –ö–û–ù–ï–¶ ---
    
      üìÅ static/
        üìÅ css/
          üìÑ style.css
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              body {
                  font-size: 1rem;
                  line-height: 1.6;
              }
              
              .card {
                  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                  transition: transform 0.2s;
              }
              
              .card:hover {
                  transform: translateY(-3px);
              }
              
              footer {
                  font-size: 0.9rem;
              }
              --- –ö–û–ù–ï–¶ ---
    
      üìÅ templates/
        üìÑ base.html
            --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
            {% load static %}
            <!DOCTYPE html>
            <html lang="ru">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1">
                <title>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å –£–¥–º—É—Ä—Ç–∏–∏</title>
                <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
                <link href="{% static 'css/style.css' %}" rel="stylesheet">
            </head>
            <body>
                <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
                    <div class="container">
                        <a class="navbar-brand" href="{% url 'core:home' %}">–§–∏–Ω–ì—Ä–∞–º–æ—Ç–∞ –£–¥–º—É—Ä—Ç–∏–∏</a>
                        <div class="navbar-nav ms-auto">
                            <a class="nav-link" href="{% url 'core:home' %}">–ì–ª–∞–≤–Ω–∞—è</a>
                            <a class="nav-link" href="{% url 'courses:list' %}">–ö—É—Ä—Å—ã</a>
                            <a class="nav-link" href="{% url 'core:contacts' %}">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
                            <a class="nav-link" href="{% url 'core:events' %}">–°–æ–±—ã—Ç–∏—è</a>
                            <form class="d-flex ms-3" action="{% url 'search:results' %}" method="get">
                                <input class="form-control me-2" type="search" name="q" placeholder="–ü–æ–∏—Å–∫..." aria-label="–ü–æ–∏—Å–∫">
                                <button class="btn btn-outline-light" type="submit">–ù–∞–π—Ç–∏</button>
                            </form>
                        </div>
                    </div>
                </nav>
            
                <div class="container mt-4">
                    {% block content %}{% endblock %}
                </div>
            
                <div id="chatbot-widget" style="position: fixed; bottom: 20px; right: 20px; z-index: 9999; width: 320px; height: 450px; display: flex; flex-direction: column; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; box-shadow: 0 4px 15px rgba(0,0,0,0.1); border-radius: 16px; background-color: white; overflow: hidden;">
            
                <div style="background-color: #d4c8b7; color: #5a6b4d; padding: 12px; font-weight: bold; display: flex; align-items: center; justify-content: space-between;">
                    üí∞üíº –ì–µ–Ω–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤
                    <button onclick="toggleChat()" style="background: none; border: none; color: #333; cursor: pointer; font-size: 16px;">√ó</button>
                </div>
            
                <div id="chat-messages" style="flex-grow: 1; padding: 12px; overflow-y: auto; background-color: #f8f6f0; max-height: 320px;"></div>
            
                <div style="display: flex; padding: 10px; border-top: 1px solid #e0e0e0;">
                    <input type="text" id="chat-input" placeholder="–í–∞—à –≤–æ–ø—Ä–æ—Å"
                           style="flex-grow: 1; padding: 8px; border: 1px solid #ccc; border-radius: 20px; outline: none;"
                           onkeydown="if(event.key==='Enter') sendQuestion()">
                    <button onclick="sendQuestion()"
                            style="margin-left: 8px; padding: 8px 16px; background-color: #6a7d5d; color: white; border: none; border-radius: 20px; cursor: pointer; font-size: 14px;">
                        –û—Ç–ø—Ä–∞–≤–∏—Ç—å
                    </button>
                </div>
            </div>
            
            <div id="chat-open-btn" style="position: fixed; bottom: 20px; right: 20px; z-index: 9998; width: 50px; height: 50px; border-radius: 50%; background-color: #6a7d5d; color: white; display: flex; align-items: center; justify-content: center; font-size: 24px; box-shadow: 0 4px 10px rgba(0,0,0,0.1); cursor: pointer; display: none;">üí¨</div>
            
            <script>
                function toggleChat() {
                const widget = document.getElementById('chatbot-widget');
                const openBtn = document.getElementById('chat-open-btn');
            
                if (widget.style.display === 'none' || !widget.style.display) {
                    widget.style.display = 'flex';
                    openBtn.style.display = 'none';
                    // ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
                    sendGreeting();
                } else {
                    widget.style.display = 'none';
                    openBtn.style.display = 'flex';
                }
            }
            
                // ‚úÖ –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –±—ã–ª–æ –ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                let greetingSent = false;
            
            // ‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
                function sendGreeting() {
                    if (greetingSent) return; // –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            
                    const messageArea = document.getElementById('chat-messages');
            
                    const greeting = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ü–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ–º–æ–≥—É!";
            
                    appendMessage(greeting, 'bot');
            
                    greetingSent = true; // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            }
            
                window.onload = function() {
                    // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ‚Äî —á–∞—Ç –æ—Ç–∫—Ä—ã—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é? –ù–µ—Ç ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                    document.getElementById('chatbot-widget').style.display = 'none';
                    document.getElementById('chat-open-btn').style.display = 'flex';
                };
            
                async function sendQuestion() {
                    const input = document.getElementById('chat-input');
                    const messageArea = document.getElementById('chat-messages');
                    const question = input.value.trim();
            
                    if (!question) return;
            
                    appendMessage(question, 'user');
                    input.value = '';
            
                    appendMessage("üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...", 'bot');
            
                    try {
                        const response = await fetch('/chat-ask/', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRFToken': getCookie('csrftoken')
                            },
                            body: JSON.stringify({ question: question })
                        });
            
                        const data = await response.json();
            
                        const lastMsg = messageArea.lastElementChild;
                        if (lastMsg && lastMsg.classList.contains('bot')) {
                            messageArea.removeChild(lastMsg);
                        }
            
                        if (data.error) {
                            appendMessage(`‚ùå ${data.error}`, 'bot');
                        } else {
                            appendMessage(data.answer, 'bot');
                        }
            
                    } catch (error) {
                        const lastMsg = messageArea.lastElementChild;
                        if (lastMsg && lastMsg.classList.contains('bot')) {
                            messageArea.removeChild(lastMsg);
                        }
                        appendMessage("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.", 'bot');
                    }
                }
            
                function appendMessage(text, sender) {
                    const messageArea = document.getElementById('chat-messages');
                    const msgDiv = document.createElement('div');
                    msgDiv.style.marginBottom = '12px';
                    msgDiv.style.maxWidth = '80%';
                    msgDiv.style.padding = '10px 14px';
                    msgDiv.style.borderRadius = sender === 'user' ? '18px 18px 0 18px' : '18px 18px 18px 0';
                    msgDiv.style.backgroundColor = sender === 'user' ? '#6a7d5d' : '#f0f0f0';
                    msgDiv.style.color = sender === 'user' ? 'white' : '#333';
                    msgDiv.style.wordWrap = 'break-word';
                    msgDiv.style.fontSize = '14px';
                    msgDiv.style.alignSelf = sender === 'user' ? 'flex-end' : 'flex-start';
                    msgDiv.textContent = text;
                    msgDiv.className = sender;
                    messageArea.appendChild(msgDiv);
                    messageArea.scrollTop = messageArea.scrollHeight;
                }
            
                function getCookie(name) {
                    let cookieValue = null;
                    if (document.cookie && document.cookie !== '') {
                        const cookies = document.cookie.split(';');
                        for (let i = 0; i < cookies.length; i++) {
                            const cookie = cookies[i].trim();
                            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                                break;
                            }
                        }
                    }
                    return cookieValue;
                }
            
                document.getElementById('chat-input').addEventListener('keydown', function(e) {
                    if (e.key === 'Enter') sendQuestion();
                });
            
                // –§–∏–∫—Å: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–∞—Ç –∑–∞–∫—Ä—ã—Ç
                function updateChatButtonVisibility() {
                    const widget = document.getElementById('chatbot-widget');
                    const openBtn = document.getElementById('chat-open-btn');
            
                    if (widget.style.display === 'none' || !widget.style.display) {
                        openBtn.style.display = 'flex';
                    } else {
                        openBtn.style.display = 'none';
                    }
                }
            
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Å–∫—Ä–æ–ª–ª–µ –∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏
                window.addEventListener('scroll', updateChatButtonVisibility);
                window.addEventListener('load', updateChatButtonVisibility);
            
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–∫—Ä—ã—Ç–∏—è
                document.getElementById('chat-open-btn').addEventListener('click', function() {
                    toggleChat();
                    // –ü–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è ‚Äî —Å–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                    updateChatButtonVisibility();
                });
            
                // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞ (–¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
                window.addEventListener('resize', updateChatButtonVisibility);
            
            </script>
            <style>
                #chatbot-widget {
                    animation: slideIn 0.3s ease-out;
                }
                @keyframes slideIn {
                    from { transform: translateX(300px); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
            </style>
            
            
                <footer class="bg-light text-center py-3 mt-5">
                    <p class="mb-0">¬© 2025 –ü–æ—Ä—Ç–∞–ª —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –£–¥–º—É—Ä—Ç–∏–∏</p>
                </footer>
            
                <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
            </body>
            </html>
            --- –ö–û–ù–ï–¶ ---
    
        üìÅ core/
          üìÑ contacts.html
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              {% extends 'base.html' %}
              
              {% block content %}
              <h1>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h1>
              <div class="row">
                  {% for contact in contacts %}
                      <div class="col-md-6 mb-4">
                          <div class="card">
                              <div class="card-body">
                                  <h5 class="card-title">{{ contact.name }}</h5>
                                  <p><strong>–ê–¥—Ä–µ—Å:</strong> {{ contact.address }}</p>
                                  <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {{ contact.phone }}</p>
                                  {% if contact.email %}
                                      <p><strong>Email:</strong> {{ contact.email }}</p>
                                  {% endif %}
                                  <p class="text-muted">–ê—É–¥–∏—Ç–æ—Ä–∏—è: {{ contact.audience }}</p>
                              </div>
                          </div>
                      </div>
                  {% endfor %}
              </div>
              {% endblock %}
              --- –ö–û–ù–ï–¶ ---
    
          üìÑ events.html
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              {% extends 'base.html' %}
              
              {% block content %}
              <h1>–°–æ–±—ã—Ç–∏—è</h1>
              <div class="row">
                  {% for event in events %}
                      <div class="col-md-6 mb-4">
                          <div class="card">
                              <div class="card-body">
                                  <h5 class="card-title">{{ event.title }}</h5>
                                  <p><strong>–î–∞—Ç–∞:</strong> {{ event.date|date:"d.m.Y" }}</p>
                                  <p><strong>–ú–µ—Å—Ç–æ:</strong> {{ event.location }}</p>
                                  <p>{{ event.description|truncatewords:20 }}</p>
                                  <p class="text-muted">–î–ª—è: {{ event.audience }}</p>
                              </div>
                          </div>
                      </div>
                  {% empty %}
                      <p>–°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
                  {% endfor %}
              </div>
              {% endblock %}
              --- –ö–û–ù–ï–¶ ---
    
          üìÑ home.html
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              {% extends 'base.html' %}
              
              {% block content %}
              <h1 class="mb-4">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –ø–æ—Ä—Ç–∞–ª —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –£–¥–º—É—Ä—Ç–∏–∏!</h1>
              
              <div class="row mb-5">
                  <div class="col-md-8">
                      <p>–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫—É—Ä—Å—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–∞—à–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏.</p>
                      <a href="{% url 'courses:list' %}" class="btn btn-primary">–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ</a>
                  </div>
                  <div class="col-md-4">
                      <div class="card">
                          <div class="card-body">
                              <h5 class="card-title">–ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è</h5>
                              {% for event in events %}
                                  <p class="card-text"><strong>{{ event.title }}</strong><br>{{ event.date|date:"d.m.Y" }} –≤ {{ event.location }}</p>
                              {% empty %}
                                  <p>–°–æ–±—ã—Ç–∏—è –ø–æ–∫–∞ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã.</p>
                              {% endfor %}
                          </div>
                      </div>
                  </div>
              </div>
              
              <h3>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫—É—Ä—Å—ã</h3>
              <div class="row">
                  {% for course in courses %}
                      <div class="col-md-4 mb-4">
                          <div class="card h-100">
                              <div class="card-body">
                                  <h5 class="card-title">{{ course.title }}</h5>
                                  <p class="card-text">{{ course.description|truncatewords:15 }}</p>
                                  <a href="{% url 'courses:detail' course.id %}" class="btn btn-outline-primary">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                              </div>
                          </div>
                      </div>
                  {% endfor %}
              </div>
              {% endblock %}
              --- –ö–û–ù–ï–¶ ---
    
        üìÅ courses/
          üìÑ detail.html
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              {% extends 'base.html' %}
              
              {% block content %}
              <h1>{{ course.title }}</h1>
              <p>{{ course.description }}</p>
              
              <h3>–£—Ä–æ–∫–∏</h3>
              <div class="list-group">
                  {% for lesson in course.lessons.all %}
                      <a href="{% url 'courses:lesson' lesson.id %}" class="list-group-item list-group-item-action">
                          {{ lesson.title }}
                      </a>
                  {% empty %}
                      <p>–£—Ä–æ–∫–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.</p>
                  {% endfor %}
              </div>
              {% endblock %}
              --- –ö–û–ù–ï–¶ ---
    
          üìÑ lesson.html
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              {% extends 'base.html' %}
              
              {% block content %}
              <h1>{{ lesson.title }}</h1>
              <div class="mb-4">{{ lesson.content|safe }}</div>
              
              {% if lesson.video_url %}
              <div class="ratio ratio-16x9 mb-4">
                  <iframe src="{{ lesson.video_url }}" title="–í–∏–¥–µ–æ—É—Ä–æ–∫">
                  </iframe>
              </div>
              {% endif %}
              
              {% if lesson.questions.exists %}
              <h3>–¢–µ—Å—Ç</h3>
              <form method="post" action="{% url 'courses:test' lesson.id %}">
                  {% csrf_token %}
                  {% for q in questions %}
                  <div class="card mb-3">
                      <div class="card-body">
                          <p><strong>{{ forloop.counter }}. {{ q.text }}</strong></p>
                          <div class="form-check">
                              <input class="form-check-input" type="radio" name="q{{ q.id }}" value="A" id="q{{ q.id }}a" required>
                              <label class="form-check-label" for="q{{ q.id }}a">{{ q.option_a }}</label>
                          </div>
                          <div class="form-check">
                              <input class="form-check-input" type="radio" name="q{{ q.id }}" value="B" id="q{{ q.id }}b">
                              <label class="form-check-label" for="q{{ q.id }}b">{{ q.option_b }}</label>
                          </div>
                          {% if q.option_c %}
                          <div class="form-check">
                              <input class="form-check-input" type="radio" name="q{{ q.id }}" value="C" id="q{{ q.id }}c">
                              <label class="form-check-label" for="q{{ q.id }}c">{{ q.option_c }}</label>
                          </div>
                          {% endif %}
                          {% if q.option_d %}
                          <div class="form-check">
                              <input class="form-check-input" type="radio" name="q{{ q.id }}" value="D" id="q{{ q.id }}d">
                              <label class="form-check-label" for="q{{ q.id }}d">{{ q.option_d }}</label>
                          </div>
                          {% endif %}
                      </div>
                  </div>
                  {% endfor %}
                  <button type="submit" class="btn btn-success">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</button>
              </form>
              {% endif %}
              {% endblock %}
              --- –ö–û–ù–ï–¶ ---
    
          üìÑ list.html
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
              {% extends 'base.html' %}
              
              {% block content %}
              <h1>–ö—É—Ä—Å—ã</h1>
              
              <form method="get" class="mb-4">
                  <div class="row">
                      <div class="col-md-4">
                          <select name="audience" class="form-select">
                              <option value="">–í—Å–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏</option>
                              <option value="—à–∫–æ–ª—å–Ω–∏–∫" {% if request.GET.audience == '—à–∫–æ–ª—å–Ω–∏–∫' %}selected{% endif %}>–®–∫–æ–ª—å–Ω–∏–∫–∏</option>
                              <option value="–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä" {% if request.GET.audience == '–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä' %}selected{% endif %}>–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã</option>
                              <option value="–ú–°–ü" {% if request.GET.audience == '–ú–°–ü' %}selected{% endif %}>–ú–°–ü</option>
                          </select>
                      </div>
                      <div class="col-md-4">
                          <select name="format" class="form-select">
                              <option value="">–í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã</option>
                              <option value="—Ç–µ–∫—Å—Ç" {% if request.GET.format == '—Ç–µ–∫—Å—Ç' %}selected{% endif %}>–¢–µ–∫—Å—Ç</option>
                              <option value="–≤–∏–¥–µ–æ" {% if request.GET.format == '–≤–∏–¥–µ–æ' %}selected{% endif %}>–í–∏–¥–µ–æ</option>
                              <option value="—Ç–µ—Å—Ç" {% if request.GET.format == '—Ç–µ—Å—Ç' %}selected{% endif %}>–¢–µ—Å—Ç</option>
                          </select>
                      </div>
                      <div class="col-md-4">
                          <button type="submit" class="btn btn-primary w-100">–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</button>
                      </div>
                  </div>
              </form>
              
              <div class="row">
                  {% for course in courses %}
                      <div class="col-md-4 mb-4">
                          <div class="card">
                              <div class="card-body">
                                  <h5 class="card-title">{{ course.title }}</h5>
                                  <p class="text-muted">–î–ª—è: {{ course.audience }} | –§–æ—Ä–º–∞—Ç: {{ course.format_type }}</p>
                                  <p>{{ course.description|truncatewords:10 }}</p>
                                  <a href="{% url 'courses:detail' course.id %}" class="btn btn-primary">–û—Ç–∫—Ä—ã—Ç—å</a>
                              </div>
                          </div>
                      </div>
                  {% empty %}
                      <p>–ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
                  {% endfor %}
              </div>
              {% endblock %}
              --- –ö–û–ù–ï–¶ ---
    
          üìÑ result.html
              --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
    --- –ö–û–ù–ï–¶ ---

üìÑ requirements.txt
    --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
    Django==5.2.6
    Pillow>=9.0.0
    django-crispy-forms>=2.1
    gunicorn>=21.2.0
    whitenoise>=6.7.0
    --- –ö–û–ù–ï–¶ ---

üìÑ vibe_maker.py
    --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---
    import os
    import sys
    from pathlib import Path
    
    
    def is_text_file(file_path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–º (–Ω–µ –±–∏–Ω–∞—Ä–Ω—ã–º)"""
        text_extensions = {
            '.py', '.txt', '.json', '.yaml', '.yml', '.xml', '.html', '.css', '.js',
            '.ini', '.cfg', '.toml', '.env', '.log', '.sql', '.csv', '.bat', '.sh', '.rst'
        }
        return file_path.suffix.lower() in text_extensions or file_path.name.endswith('.gitignore')
    
    
    def export_project_structure(root_dir, output_file="project_structure.txt"):
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.
        """
        root_path = Path(root_dir)
        if not root_path.exists() or not root_path.is_dir():
            print(f"‚ùå –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ '{root_dir}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.")
            return
    
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(f"=== –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê: {root_path.name} ===\n")
            f.write(f"–ü—É—Ç—å: {root_path.absolute()}\n")
            f.write("=" * 60 + "\n\n")
    
            def write_tree(path, indent=""):
                items = sorted(path.iterdir())  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                for item in items:
                    rel_path = item.relative_to(root_path)
                    if item.is_dir():
                        f.write(f"{indent}üìÅ {item.name}/\n")
                        write_tree(item, indent + "  ")
                    elif item.is_file():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ª–∏ —Ñ–∞–π–ª
                        if is_text_file(item):
                            f.write(f"{indent}üìÑ {item.name}\n")
                            try:
                                content = item.read_text(encoding='utf-8')
                                f.write(f"{indent}    --- –°–û–î–ï–†–ñ–ò–ú–û–ï ---\n")
                                for line in content.splitlines():
                                    f.write(f"{indent}    {line}\n")
                                f.write(f"{indent}    --- –ö–û–ù–ï–¶ ---\n\n")
                            except UnicodeDecodeError:
                                f.write(f"{indent}    ‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å (–Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞)\n\n")
                        else:
                            # –ù–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª ‚Äî –ø—Ä–æ—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞–µ–º
                            f.write(f"{indent}üìÑ {item.name} (–±–∏–Ω–∞—Ä–Ω—ã–π, –ø—Ä–æ–ø—É—â–µ–Ω)\n")
    
            write_tree(root_path)
    
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {output_file}")
    
    
    if __name__ == "__main__":
        # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        folder_path = sys.argv[1] if len(sys.argv) > 1 else "."
        export_project_structure(folder_path)
    --- –ö–û–ù–ï–¶ ---

