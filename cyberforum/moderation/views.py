from django.contrib.auth.decorators import user_passes_test
from django.shortcuts import render, get_object_or_404, redirect

from core.views import is_moderator
from documentation.forms import DocumentationFileForm
from documentation.models import DocumentationFile
from django.contrib import messages

from events.forms import EventForm
from events.models import Event
from news.forms import NewsForm
from news.models import News

from courses.models import Course
from moderation.forms import CourseForm
from courses.models import Lesson, Question
from .forms import LessonForm, QuestionFormSet


@user_passes_test(is_moderator, login_url="/login/")
def documentation_moderator_list(request):
    docs = DocumentationFile.objects.all().order_by("-uploaded_at")
    return render(
        request, "moderation/documentation_moderator_list.html", {"docs": docs}
    )


@user_passes_test(is_moderator, login_url="/login/")
def documentation_create(request):
    if request.method == "POST":
        form = DocumentationFileForm(request.POST, request.FILES)
        if form.is_valid():
            form.save()
            messages.success(request, "–î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return redirect("moderation:documentation_list")
    else:
        form = DocumentationFileForm()
    return render(
        request,
        "moderation/documentation_form.html",
        {"form": form, "title": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"},
    )


@user_passes_test(is_moderator, login_url="/login/")
def documentation_delete(request, doc_id):
    doc = get_object_or_404(DocumentationFile, id=doc_id)
    if request.method == "POST":
        doc.delete()
        messages.success(request, "–î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.")
        return redirect("moderation:documentation_list")
    return render(request, "moderation/documentation_confirm_delete.html", {"doc": doc})


@user_passes_test(is_moderator, login_url="/login/")
def event_moderator_list(request):
    events = Event.objects.all().order_by("date")
    return render(
        request, "moderation/event_moderator_list.html", {"event_list": events}
    )


from core.telegram_utils import send_telegram_message


@user_passes_test(is_moderator, login_url="/login/")
def event_create(request):
    if request.method == "POST":
        form = EventForm(request.POST)
        if form.is_valid():
            event = form.save()
            messages.success(request, "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")

            # === –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram ===
            msg = (
                f"üì¢ <b>–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!</b>\n\n"
                f"<b>{event.title}</b>\n\n"
                f"üìÖ –î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y')}\n\n"
                f"üìç –ú–µ—Å—Ç–æ: {event.location}\n"
                f"üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: {event.get_audience_display()}\n\n"
                f"{event.description[:200]}{'...' if len(event.description) > 200 else ''}"
            )
            send_telegram_message(msg)

            return redirect("moderation:event_list")
    else:
        form = EventForm()
    return render(
        request, "moderation/event_form.html", {"form": form, "title": "–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"}
    )


@user_passes_test(is_moderator, login_url="/login/")
def event_edit(request, event_id):
    event = get_object_or_404(Event, id=event_id)
    if request.method == "POST":
        form = EventForm(request.POST, instance=event)
        if form.is_valid():
            form.save()
            messages.success(request, "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            return redirect("moderation:event_list")
    else:
        form = EventForm(instance=event)
    return render(
        request,
        "moderation/event_form.html",
        {"form": form, "title": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"},
    )


@user_passes_test(is_moderator, login_url="/login/")
def event_delete(request, event_id):
    event = get_object_or_404(Event, id=event_id)
    if request.method == "POST":
        event.delete()
        messages.success(request, "–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        return redirect("moderation:event_list")
    return render(request, "moderation/event_confirm_delete.html", {"event": event})



@user_passes_test(is_moderator, login_url="/login/")
def news_moderator_list(request):
    news_items = News.objects.all().order_by("-created_at")
    return render(
        request, "moderation/news_moderator_list.html", {"news_list": news_items}
    )


@user_passes_test(is_moderator, login_url="/login/")
def news_create(request):
    if request.method == "POST":
        form = NewsForm(request.POST, request.FILES)  # ‚Üê request.FILES
        if form.is_valid():
            news = form.save(commit=False)
            news.author = request.user
            news.save()
            messages.success(request, "–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
            return redirect("moderation:news_list")
    else:
        form = NewsForm()
    return render(
        request, "moderation/news_form.html", {"form": form, "title": "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å"}
    )


@user_passes_test(is_moderator, login_url="/login/")
def news_edit(request, news_id):
    news = get_object_or_404(News, id=news_id)
    if request.method == "POST":
        form = NewsForm(request.POST, request.FILES, instance=news)  # ‚Üê request.FILES
        if form.is_valid():
            form.save()
            messages.success(request, "–ù–æ–≤–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            return redirect("moderation:news_list")
    else:
        form = NewsForm(instance=news)
    return render(
        request,
        "moderation/news_form.html",
        {"form": form, "title": "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å"},
    )


@user_passes_test(is_moderator, login_url="/login/")
def news_delete(request, news_id):
    news = get_object_or_404(News, id=news_id)
    if request.method == "POST":
        news.delete()
        messages.success(request, "–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞.")
        return redirect("moderation:news_list")
    return render(request, "moderation/news_confirm_delete.html", {"news": news})


@user_passes_test(is_moderator, login_url="/login/")
def dashboard(request):
    return render(request, "moderation/dashboard.html")


@user_passes_test(lambda u: u.is_authenticated and u.is_moderator, login_url='/login/')
def course_moderator_list(request):
    courses = Course.objects.all().order_by('-created_at')
    return render(request, 'moderation/course_moderator_list.html', {'courses': courses})


@user_passes_test(lambda u: u.is_authenticated and u.is_moderator, login_url='/login/')
def course_create(request):
    if request.method == 'POST':
        form = CourseForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, "–ö—É—Ä—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            return redirect('moderation:course_moderator_list')
    else:
        form = CourseForm()
    return render(request, 'moderation/course_form.html', {'form': form, 'title': '–°–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å'})


@user_passes_test(lambda u: u.is_authenticated and u.is_moderator, login_url='/login/')
def course_edit(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    if request.method == 'POST':
        form = CourseForm(request.POST, instance=course)
        if form.is_valid():
            form.save()
            messages.success(request, "–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω!")
            return redirect('moderation:course_moderator_list')
    else:
        form = CourseForm(instance=course)
    return render(request, 'moderation/course_form.html', {'form': form, 'title': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫—É—Ä—Å'})


@user_passes_test(lambda u: u.is_authenticated and u.is_moderator, login_url='/login/')
def course_delete(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    if request.method == 'POST':
        course.delete()
        messages.success(request, "–ö—É—Ä—Å —É–¥–∞–ª—ë–Ω.")
        return redirect('moderation:course_moderator_list')
    return render(request, 'moderation/course_confirm_delete.html', {'course': course})


@user_passes_test(lambda u: u.is_authenticated and u.is_moderator, login_url='/login/')
def lesson_list(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    lessons = course.lessons.all().order_by('order')
    return render(request, 'moderation/lesson_list.html', {
        'course': course,
        'lessons': lessons
    })

@user_passes_test(lambda u: u.is_authenticated and u.is_moderator, login_url='/login/')
def lesson_create(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    if request.method == 'POST':
        lesson_form = LessonForm(request.POST)
        question_formset = QuestionFormSet(request.POST)
        if lesson_form.is_valid() and question_formset.is_valid():
            lesson = lesson_form.save(commit=False)
            lesson.course = course
            lesson.save()
            question_formset.instance = lesson
            question_formset.save()
            messages.success(request, "–£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
            return redirect('moderation:lesson_list', course_id=course.id)
    else:
        lesson_form = LessonForm()
        question_formset = QuestionFormSet()
    return render(request, 'moderation/lesson_form.html', {
        'form': lesson_form,
        'formset': question_formset,
        'course': course,
        'title': '–°–æ–∑–¥–∞—Ç—å —É—Ä–æ–∫'
    })

@user_passes_test(lambda u: u.is_authenticated and u.is_moderator, login_url='/login/')
def lesson_edit(request, lesson_id):
    lesson = get_object_or_404(Lesson, id=lesson_id)
    if request.method == 'POST':
        lesson_form = LessonForm(request.POST, instance=lesson)
        question_formset = QuestionFormSet(request.POST, instance=lesson)
        if lesson_form.is_valid() and question_formset.is_valid():
            lesson_form.save()
            question_formset.save()
            messages.success(request, "–£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω!")
            return redirect('moderation:lesson_list', course_id=lesson.course.id)
    else:
        lesson_form = LessonForm(instance=lesson)
        question_formset = QuestionFormSet(instance=lesson)
    return render(request, 'moderation/lesson_form.html', {
        'form': lesson_form,
        'formset': question_formset,
        'course': lesson.course,
        'title': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫'
    })

@user_passes_test(lambda u: u.is_authenticated and u.is_moderator, login_url='/login/')
def lesson_delete(request, lesson_id):
    lesson = get_object_or_404(Lesson, id=lesson_id)
    course_id = lesson.course.id
    if request.method == 'POST':
        lesson.delete()
        messages.success(request, "–£—Ä–æ–∫ —É–¥–∞–ª—ë–Ω.")
        return redirect('moderation:lesson_list', course_id=course_id)
    return render(request, 'moderation/lesson_confirm_delete.html', {'lesson': lesson})
