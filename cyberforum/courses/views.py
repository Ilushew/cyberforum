import os

from django.contrib.auth.decorators import login_required
from django.shortcuts import render, get_object_or_404, redirect
import io
from django.http import HttpResponse
from django.shortcuts import get_object_or_404
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.utils import simpleSplit
from reportlab.lib.colors import Color
from django.contrib import messages
from .models import Course, Lesson, Question, TestResult, CourseCompletion
from .utils import mark_course_as_completed
from cyberforum import settings


def course_list_view(request):
    courses = Course.objects.all()

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    audience = request.GET.get("audience")
    format_type = request.GET.get("format")

    if audience:
        courses = courses.filter(audience=audience)
    if format_type:
        courses = courses.filter(format_type=format_type)

    return render(request, "courses/list.html", {"courses": courses})


def course_detail_view(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    return render(request, "courses/detail.html", {"course": course})


def lesson_view(request, lesson_id):
    lesson = get_object_or_404(Lesson, id=lesson_id)
    questions = lesson.questions.all()

    # üî• –ï—Å–ª–∏ —É—Ä–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–∞ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∑–∞—Å—á–∏—Ç–∞—Ç—å –∫—É—Ä—Å
    if request.user.is_authenticated and not questions.exists():
        mark_course_as_completed(request.user, lesson.course)

    return render(request, 'courses/lesson.html', {
        'lesson': lesson,
        'questions': questions,
    })


def submit_test_view(request, lesson_id):
    lesson = get_object_or_404(Lesson, id=lesson_id)
    course = lesson.course
    questions = lesson.questions.all()
    total = questions.count()
    correct = 0
    if request.method == "POST":
        for q in questions:
            user_answer = request.POST.get(f"q{q.id}")
            if user_answer == q.correct_answer:
                correct += 1
        score_percent = int((correct / total) * 100) if total > 0 else 0

        TestResult.objects.create(
            lesson=lesson,
            user=request.user if request.user.is_authenticated else None,
            score=correct,
            total=total,
            percent=score_percent,
        )

        # üî• –ü–æ–º–µ—á–∞–µ–º –∫—É—Ä—Å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π (–µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã)
        if request.user.is_authenticated:
            mark_course_as_completed(request.user, course)

        return render(request, 'courses/result.html', {
            'score': correct,
            'total': total,
            'percent': score_percent,
            'lesson': lesson,
        })
    return redirect('courses:lesson', lesson_id=lesson_id)




@login_required
def download_certificate(request, course_id):
    completion = get_object_or_404(
        CourseCompletion,
        user=request.user,
        course_id=course_id
    )

    if not (request.user.first_name and request.user.last_name):
        messages.error(
            request,
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
        )
        return redirect('core:profile')

    buffer = io.BytesIO()
    p = canvas.Canvas(buffer, pagesize=A4)
    width, height = A4

    # === –¶–í–ï–¢–ê ===
    primary_color = Color(106/255, 125/255, 93/255)      # #6a7d5d
    bg_color = Color(248/255, 246/255, 240/255)          # #f8f6f0
    text_color = Color(0.2, 0.2, 0.2)                    # —Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–π
    light_border = Color(106/255, 125/255, 93/255, alpha=0.1)

    # === –®–†–ò–§–¢ ===
    font_path = os.path.join(settings.BASE_DIR, 'static', 'fonts', 'DejaVuSans.ttf')
    try:
        pdfmetrics.registerFont(TTFont('DejaVuSans', 'DejaVuSans.ttf'))
        font_name = 'DejaVuSans'
    except Exception as e:
        print(f"‚ö†Ô∏è –®—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        font_name = 'Helvetica'

    # === –§–û–ù ===
    p.setFillColor(bg_color)
    p.rect(0, 0, width, height, stroke=0, fill=1)

    # === –î–ï–ö–û–†–ê–¢–ò–í–ù–ê–Ø –í–ï–†–•–ù–Ø–Ø –ü–û–õ–û–°–ê ===
    p.setFillColor(primary_color)
    p.rect(0, height - 90, width, 90, stroke=0, fill=1)

    # === –ó–ê–ì–û–õ–û–í–û–ö ===
    p.setFont(font_name, 28)
    p.setFillColor(Color(1, 1, 1))  # –±–µ–ª—ã–π
    title = "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–∞"
    title_lines = simpleSplit(title, font_name, 28, width - 100)
    y = height - 30
    for line in title_lines:
        p.drawCentredString(width / 2, y, line)
        y -= 35

    # === –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ (–Ω–∞ –±–µ–ª–æ–º —Ñ–æ–Ω–µ) ===
    content_top = height - 120
    content_bottom = 150
    content_width = width - 120

    # –ë–µ–ª–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
    p.setFillColor(Color(1, 1, 1))
    p.roundRect(60, content_bottom, width - 120, content_top - content_bottom, 10, stroke=0, fill=1)

    # –¢–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    p.setFillColor(text_color)
    y = content_top - 40

    p.setFont(font_name, 14)
    p.drawCentredString(width / 2, y, "–ù–∞—Å—Ç–æ—è—â–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ")
    y -= 50

    # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = completion.user.get_full_name() or completion.user.email
    p.setFont(font_name, 22)
    name_lines = simpleSplit(user_name, font_name, 22, content_width - 40)
    for line in name_lines:
        p.drawCentredString(width / 2, y, line)
        y -= 35

    y -= 20
    p.setFont(font_name, 14)
    p.drawCentredString(width / 2, y, "—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª(–∞) –∫—É—Ä—Å")
    y -= 50

    # –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
    course_title = f"¬´{completion.course.title}¬ª"
    p.setFont(font_name, 20)
    course_lines = simpleSplit(course_title, font_name, 20, content_width - 40)
    for line in course_lines:
        p.drawCentredString(width / 2, y, line)
        y -= 32

    y -= 40
    p.setFont(font_name, 12)
    p.setFillColor(Color(0.4, 0.4, 0.4))
    p.drawCentredString(width / 2, y, f"–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {completion.completed_at.strftime('%d.%m.%Y')}")
    y -= 20
    p.drawCentredString(width / 2, y, f"ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {completion.certificate_id}")

    # –ü–æ–¥–ø–∏—Å—å
    y = 180
    p.setFillColor(text_color)
    p.setFont(font_name, 14)
    p.drawCentredString(width / 2, y, "–î–∏—Ä–µ–∫—Ç–æ—Ä –¶–µ–Ω—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –£–¥–º—É—Ä—Ç–∏–∏")

    # === –î–ï–ö–û–†–ê–¢–ò–í–ù–´–ô –≠–õ–ï–ú–ï–ù–¢ (–ª–∏–Ω–∏—è –∏–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –≤–Ω–∏–∑—É) ===
    p.setFillColor(primary_color)
    p.rect(0, 0, width, 30, stroke=0, fill=1)
    p.setFillColor(Color(1, 1, 1))
    p.setFont(font_name, 10)
    p.drawCentredString(width / 2, 10, "fingramota.udmurt.ru")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    p.showPage()
    p.save()

    buffer.seek(0)
    response = HttpResponse(buffer, content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="certificate_{course_id}.pdf"'
    return response